{"title":"Méthodes de détection d'agrégats spatiaux et spatio-temporels","markdown":{"headingText":"Méthodes de détection d'agrégats spatiaux et spatio-temporels","headingAttr":{"id":"sec-chap04","classes":[],"keyvalue":[]},"containsRefs":false,"markdown":"\nDans ce chapitre, nous abordons deux familles de méthodes de détection d'agrégats spatiaux et spatio-temporels qui s'appliquent à des géométries différentes : les méthodes de classification basées sur la densité des points (couche de points), principalement les algorithmes DBSCAN [@DBSCAN1996] et ST-DBSCAN [@birant2007st], et les méthodes de balayage de Kulldorff [-@kulldorff1997spatial] (couche polygonale).\n\n::: bloc_package\n::: bloc_package-header\n::: bloc_package-icon\n:::\n\n**Liste des *packages* utilisés dans ce chapitre**\n:::\n\n::: bloc_package-body\n-   Pour importer et manipuler des fichiers géographiques :\n    -   `sf` pour importer et manipuler des données vectorielles.\n    -   `dplyr` pour manipuler les données.\n-   Pour construire des cartes et des graphiques :\n    -   `tmap` pour les cartes.\n    -   `ggplot2` pour construire des graphiques.\n-   `dbscan` pour l'algorithme DBSCAN.\n-   `SpatialEpi` pour les méthodes de balayage de Kurlldoff.\n:::\n:::\n\n## Agrégats d'entités spatiales ponctuelles {#sec-041}\n\n### DBSCAN : agrégats spatiaux {#sec-0411}\n\n::: bloc_objectif\n::: bloc_objectif-header\n::: bloc_objectif-icon\n:::\n\n**Pourquoi utiliser DBSCAN ?**\n:::\n\n::: bloc_objectif-body\nDans le chapitre précédent, portant sur les *méthodes de répartition ponctuelles*, nous avons abordé la méthode KDE permettant de cartographier la densité de points dans une maille régulière ([section @sec-0342]). La carte de chaleur obtenue avec la KDE représente les valeurs de densité (variable continue) pour les pixels couvrant le territoire à l'étude.\n\nAvec l'algorithme DBSCAN [@DBSCAN1996], l'objectif est différent : il s'agit d'**identifier des agrégats spatiaux d'évènements ponctuels dans un territoire donné** (par exemple, des cas de maladies, d'accidents, d'espèces fauniques ou végétales, de crimes, etc.). Autrement dit, il s'agit d'identifier plusieurs régions du territoire à l'étude dans lesquelles la densité de points est forte.\n\nConcrètement, si la méthode KDE renvoie une variable continue pour l'ensemble du territoire, l'algorithme DBSCAN renvoie une variable qualitative uniquement pour les points du jeu de données.\n:::\n:::\n\n#### Fonctionnement de DBSCAN {#sec-04111}\n\nDBSCAN (***D**ensity-**B**ased **S**patial **C**lustering of **A**pplications with **N**oise*) est un algorithme de classification non supervisée qui regroupe des observations en fonction de **leur densité** dans un espace à deux, trois ou *n* dimensions [@DBSCAN1996]. Comme pour toute autre méthode de classification non supervisée, ces dimensions sont des variables. Par conséquent, en appliquant DBSCAN sur les coordonnées géographiques d'entités ponctuelles 2D (*x*, *y*) ou 3D (*x*, *y*, *z*), nous classifions les points du jeu de données.\n\nPrenons un jeu de données fictives (@fig-DonnesFictivesDBSCAN, a). À l'œil nu, nous identifions clairement cinq régions distinctes avec une forte densité de points et des zones de faible densité; ces dernières étant représentées par les points noirs avec DBSCAN (@fig-DonnesFictivesDBSCAN, b).\n\n```{r}\n#| echo: false \n#| message: false \n#| warning: false\n#| label: fig-DonnesFictivesDBSCAN\n#| fig-align: center\n#| fig-cap: Jeu de données fictives et classification DBSCAN avec cinq classes\n#| out-width: 65%\n\nlibrary(\"dbscan\")\nlibrary(\"factoextra\")\nlibrary(\"ggplot2\")\nlibrary(\"cluster\")\nlibrary(\"Gmedian\")\nlibrary(\"ggpubr\")\n\nset.seed(123456789)\npoints <- multishapes[, 1:2]\n\n# dbscan\npoints$dbscan5 <- as.character(dbscan(points[, 1:2], eps = 0.15, minPts = 5)$cluster)\n\ncouleurs <- c(\"#000000\", \"#e41a1c\", \"#377eb8\", \"#4daf4a\", \"#984ea3\", \"#ff7f00\")\n\ng1 <- ggplot(data = points)+\n  geom_point(aes(x = x, y = y))+\n  labs(x = \"X\", y = 'Y', title = 'a. Jeu de données fictives')\n\ng2 <- ggplot(data = points,\n             aes(x = x, y = y, color = dbscan5))+\n  geom_point()+ scale_color_manual(values=couleurs)+\n  labs(x = \"X\", y = 'Y', title = 'b. DBSCAN')+\n  theme(legend.position = \"none\")\n\n# K-moyennes, K-médianes, K-médoïdes\npoints$Kmoyennes5 <- as.character(kmeans(points[, 1:2], centers = 5, iter.max = 100)$cluster)\npoints$Kmedianes5 <- as.character(kGmedian(points[, 1:2], ncenters = 5, iter.max = 100)$cluster)\npoints$Kmedoides5 <- as.character(pam(points[, 1:2], k = 5)$cluster)\npoints$CAHWard5   <- as.character(cutree(hclust(dist(points[, 1:2], method = \"euclidean\"), method = \"ward.D\"), k= 5))\n\ng3 <- ggplot(data = points,\n             aes(x = x, y = y, color = Kmoyennes5))+\n  geom_point()+ scale_color_manual(values = couleurs)+\n  labs(x = \"X\", y = 'Y', title = 'a. K-moyennes')+\n  theme(legend.position=\"none\")\n\ng4 <- ggplot(data = points,\n             aes(x = x, y = y, color = Kmedianes5))+\n  geom_point()+ scale_color_manual(values = couleurs)+\n  labs(x = \"X\", y = 'Y', title = 'b. K-médianes')+\n  theme(legend.position=\"none\")\n\ng5 <- ggplot(data = points,\n             aes(x = x, y = y, color = Kmedoides5))+\n  geom_point()+ scale_color_manual(values=couleurs)+\n  labs(x = \"X\", y = 'Y', title = 'c. K-médoïdes')+\n  theme(legend.position=\"none\")\n\ng6 <- ggplot(data = points,\n             aes(x = x, y = y, color = CAHWard5))+\n  geom_point()+ scale_color_manual(values=couleurs)+\n  labs(x = \"X\", y = 'Y', \n       title = \"d. Classif. ascendante hiérarchique\")+\n  theme(legend.position=\"none\")\n\nggarrange(g1, g2)\n```\n\n\nL'intérêt majeur de l'algorithme DBSCAN est qu'il est basé sur la **densité des points** et non sur la **distance entre les points** comme les algorithmes classiques de classification non supervisée que sont les k-moyennes, k-médianes, k-médoïdes ou la classification ascendante hiérarchique. Tel qu'illustré à la @fig-AutresMethodesClassifNonSuperv, l'utilisation de la distance pour identifier cinq groupes de points renvoie des résultats peu convaincants. D'une part, tous les points appartiennent à une classe, sans séparer les régions de fortes et de faibles densités. D'autre part, les algorithmes classiques basés sur la distance ne parviennent pas à bien identifier les deux agrégats circulaires (bleu et rouge à la @fig-DonnesFictivesDBSCAN, b) et parfois linéaires (vert et mauve à la @fig-DonnesFictivesDBSCAN, b).\n\n```{r}\n#| echo: false \n#| message: false \n#| warning: false\n#| label: fig-AutresMethodesClassifNonSuperv\n#| fig-align: center\n#| fig-cap: Classification avec d'autres algorithmes basés sur la distance\n#| out-width: 65%\nggarrange(g3, g4, g5, g6)\n```\n\nL'algorithme DBSCAN comprend deux paramètres qui doivent être définis par la personne utilisatrice :\n\n-   **Le rayon de recherche**, dénommé $\\epsilon$ (epsilon), habituellement basé sur la distance euclidienne. Les distances de Manhattan ou réticulaires peuvent aussi être utilisées.\n\n-   **Le nombre minimum de points**, dénommé $MinPts$, requis pour qu'un point, incluant lui-même, soit considéré comme un point central et appartienne à un agrégat, un regroupement (*cluster* en anglais).\n\n::: bloc_notes\n::: bloc_notes-header\n::: bloc_notes-icon\n:::\n\n**Avantage de DBSCAN : nul besoin de spécifier le nombre d'agrégats (*clusters*)!**\n:::\n\n::: bloc_notes-body\nComparativement à d'autres méthodes de classification non supervisées comme les k-moyennes, k-médianes et k-médoïdes, DBSCAN ne requiert pas de spécifier le nombre de classes à identifier dans le jeu de données. Autrement dit, appliqué à des géométries ponctuelles, l'algorithme DBSCAN détecte autant d'agrégats spatiaux que nécessaire en fonction des valeurs des deux paramètres ($\\epsilon$ et $MinPts$).\n:::\n:::\n\nÀ la @fig-TypesPointsDBSCAN, nous appliquons l'algorithme DBSCAN à un semis de points avec un rayon de recherche de 500 mètres ($\\epsilon=500$) et un nombre minimum de cinq points ($MinPts = 5$). Dans un premier temps, l'algorithme distingue trois types de points :\n\n1.  Des **points centraux** (*core points* en anglais) qui ont au moins cinq points (incluant eux-mêmes) dans un rayon de 500 mètres (points rouges).\n2.  Des **points frontières** (*border points*) qui ont moins de cinq points (incluant eux-mêmes) dans un rayon de 500 mètres, mais qui sont inclus dans la zone tampon de 500 mètres d'un point central (points bleus).\n3.  Des **points aberrants** (*noise points*) qui ont moins de cinq points (incluant eux-mêmes) dans un rayon de 500 mètres et qui ne sont pas inclus dans la zone tampon d'un point central (points noirs).\n\n```{r}\n#| echo: false \n#| message: false \n#| warning: false\n#| eval: false\nlibrary(\"dbscan\")\nlibrary(\"sf\")\nlibrary(\"tmap\")\n\nset.seed(123456789)\npoints.sf <- st_read(\"data/chap04/PointsDBSCAN.shp\", quiet = TRUE)\nxy <- st_coordinates(points.sf)\npoints.sf$x <- xy[,1]\npoints.sf$y <- xy[,2]\n## Zone tampon\nbuffer.sf <- st_buffer(points.sf, 500)\nbuffer.sf$Npoints500 <- lengths(st_contains(buffer.sf, points.sf))-1\nbuffer.sf$Densite <- ifelse(buffer.sf$Npoints500 < 5, 0, 1)\n## DBSCAN\npoints <- st_drop_geometry(points.sf)\npoints.sf$dbscan <- as.character(dbscan(points[, 2:3], eps = 500, minPts = 5)$cluster)\npoints.sf$Npoints500 <- buffer.sf$Npoints500\npoints.sf$Densite    <- as.character(buffer.sf$Densite)\n## Classification\npoints.sf$typePoints <- ifelse(points.sf$Npoints500 > 4, \"1. Points centraux\", \"\")\npoints.sf$typePoints <- ifelse(points.sf$Npoints500 < 5 & points.sf$dbscan > 0, \"2. Points frontières\", points.sf$typePoints)\npoints.sf$typePoints <- ifelse(points.sf$dbscan == 0, \"3. Points aberrants\", points.sf$typePoints)\nbuffer.sf$typePoints <- points.sf$typePoints\n## Cartographie\ncouleurs <- c(\"#e41a1c\", \"#377eb8\", \"#000000\")\nCarte1 <- tm_shape(points.sf, unit = \"m\")+\n             tm_dots(shape = 21, size=.2, col= \"typePoints\", palette = couleurs, title =\"\")+\n          tm_shape(subset(buffer.sf, buffer.sf$OBJECTID %in% c(13,133,165)))+\n             tm_polygons(col= \"typePoints\", palette = couleurs, alpha = .15, legend.show = FALSE)+\n          tm_scale_bar(breaks  = c(0, 500), position = c(\"right\", \"bottom\"), text.size = .75, )+\n          tm_layout(frame = FALSE, legend.position = c(\"center\", \"bottom\"), \n                    legend.text.size = .85, legend.outside = TRUE)\nCarte1\n\ncouleurs <- c(\"#000000\", \"#984ea3\", \"#ff7f00\")\nCarte2 <- tm_shape(points.sf, unit = \"m\")+\n             tm_dots(shape = 21, size=.2, col= \"dbscan\", palette = couleurs, title =\"\")+\n          tm_scale_bar(breaks  = c(0, 500), position = c(\"right\", \"bottom\"), text.size = .75, )+\n          tm_layout(frame = FALSE, legend.position = c(\"center\", \"bottom\"), \n                    legend.text.size = .85, legend.outside = TRUE)\n```\n\n![Trois types de points identifiés par l'algorithme DBSCAN](images/Chap04/DbscanTypesPoints.png){#fig-TypesPointsDBSCAN width=\"65%\" fig-align=\"center\"}\n\nPar la suite, les étapes de l'algorithme sont les suivantes :\n\n-   **Étape 1.** Formation du premier agrégat\n\n    -   Nous tirons au hasard un point central et l'assignons au premier agrégat (groupe ou *cluster*).\n\n    -   Puis, les points compris dans la zone tampon du premier point central sont ajoutés à ce premier agrégat.\n\n    -   De façon itérative, nous étendons l'agrégat avec les points centraux ou frontières qui sont compris dans les zones tampons des points ajoutés précédemment.\n\n-   **Étape 2.** Formation d'autres agrégats\n\n    -   Lorsque le premier agrégat est complété, nous tirons au hasard un autre point central n'appartenant pas au premier agrégat.\n\n    -   Nous appliquons la même démarche qu'à l'étape 1 pour étendre et compléter cet autre agrégat.\n\n    -   Les deux sous-étapes ci-dessus sont répétées jusqu'à ce que tous les points centraux et frontières soient assignés à un agrégat.\n\nNous obtenons ainsi *k* agrégats (valeurs de 1 à *k*) tandis que les points aberrants sont affectés à la même classe (valeur de 0 habituellement). Appliqué au semis de points, DBSCAN a détecté deux agrégats et quatre points aberrants (@fig-ResultatsDBSCAN).\n\n![Résultats de l'algorithme DBSCAN](images/Chap04/DbscanResultats.png){#fig-ResultatsDBSCAN width=\"65%\" fig-align=\"center\"}\n\n#### Sensibilité et optimisation des paramètres de DBSCAN {#sec-04112}\n\nLes résultats de l'algorithme de DBSCAN varient en fonction de ses deux paramètres, soit le rayon de recherche ($\\epsilon$) et le nombre minimum de points ($MinPts$).\n\nConcernant le paramètre $\\epsilon$, plus sa valeur est réduite, plus le nombre de points identifiés comme aberrants est important. Inversement, plus elle est grande, plus le nombre d'agrégats diminue. En guise d'illustration, faisons varier la valeur du rayon en maintenant à cinq le nombre minimum de points :\n\n-   Avec un rayon de 250 mètres, cinq agrégats sont identifiés tandis que 29 points sont considérés comme du bruit (@fig-VariationResultatsDBSCAN, a).\n\n-   Avec un rayon de 500 mètres, la solution est plus optimale avec deux agrégats et cinq points aberrants (@fig-VariationResultatsDBSCAN, b).\n\n-   Avec un rayon de 1000 mètres, deux agrégats sont aussi identifiés. Par contre, il ne reste plus qu'un point aberrant. Par conséquent, quatre points qui, à l'œil nu, sont très éloignés d'un agrégat y sont pourtant affectés (@fig-VariationResultatsDBSCAN, c).\n\n-   Avec un rayon de 1500 mètres, tous les points sont affectés à un et un seul agrégat (@fig-VariationResultatsDBSCAN, d).\n\n![Variations de résultats de l'algorithme DBSCAN selon la taille du rayon](images/Chap04/DbscanResultatsVariation.png){#fig-VariationResultatsDBSCAN width=\"65%\" fig-align=\"center\"}\n\nConcernant le paramètre $MinPts$, plusieurs stratégies ont été proposées pour fixer sa valeur :\n\n-   $MinPts \\geq dim(D) + 1$, c'est-à-dire que sa valeur doit être minimalement égale au nombre de dimensions (variables) plus un du jeu de données.\n-   $MinPts = dim(D) \\times 2$, c'est-à-dire que le nombre de points devrait être égal à deux fois le nombre de dimensions du tableau [@sander1998density].\n-   $MinPts = 4$ quand le jeu de données ne comprend que deux dimensions [@DBSCAN1996], soit un critère qui s'applique à des géométries ponctuelles 2D.\n\nAprès avoir fixé le nombre minimal de points, nous pouvons optimiser la valeur du rayon de recherche de la façon suivante :\n\n-   Pour chacun des points, calculer la distance au *k*^ième^ point le plus proche.\n\n-   Trier les valeurs obtenues pour construire un graphique en courbe.\n\n-   Dans ce graphique, utiliser le *critère du coude* pour repérer la ou les valeurs signalant un décrochement dans la courbe. À la lecture de la @fig-KPlusProcheDbScan, les valeurs d'epsilon ($\\epsilon$) à retenir pourraient être 300, 350, 425 et 450 mètres.\n\n```{r}\n#| echo: false \n#| message: false \n#| warning: false\n#| label: fig-KPlusProcheDbScan\n#| fig-align: center\n#| fig-cap: Optimisation de la valeur d'epsilon\n#| out-width: 65%\nset.seed(123456789)\nlibrary(sf)\nlibrary(ggplot2)\npoints.sf <- st_read(\"data/chap04/PointsDBSCAN.shp\", quiet = TRUE)\nxy <- st_coordinates(points.sf)\npoints.sf$x <- xy[,1]\npoints.sf$y <- xy[,2]\npoints <- st_drop_geometry(points.sf)\n\nDistKplusproche <- kNNdist(points[, 2:3], k = 4)\nDistKplusproche <- as.data.frame(sort(DistKplusproche, decreasing = FALSE))\nnames(DistKplusproche) <- \"distance\"\n\nggplot(data = DistKplusproche)+\n  geom_path(aes(x = 1:nrow(DistKplusproche), y = distance), size=1)+\n  labs(x = \"Points triés par ordre croissant selon la distance\",\n       y = \"Distance au quatrième point le plus proche\",\n       )+\n  geom_hline(yintercept=300, color = \"#08306b\", linetype=\"dashed\", size=1)+\n  geom_hline(yintercept=350, color = \"#00441b\", linetype=\"dashed\", size=1)+\n  geom_hline(yintercept=425, color = \"#67000d\", linetype=\"dashed\", size=1)+\n  geom_hline(yintercept=450, color = \"#3f007d\", linetype=\"dashed\", size=1)\n```\n\nSi vous repérez plusieurs seuils de distance dans le graphique des distances au *k*^ième^ plus proche voisin, réalisez et comparez les résultats des DBSCAN avec ces valeurs d'epsilon. À la @fig-DbscanResultatsOptimatisationEpsilon, nous constatons que les résultats avec des seuils de 425 et 450 mètres sont identiques et semblent optimaux. Par contre, la solution avec un rayon de 350 mètres identifie deux points aberrants qui pourraient être intégrés au deuxième agrégat tandis que celle avec un rayon de 300 mètres identifie un agrégat supplémentaire, mais classifie de nombreux points comme aberrants.\n\n::: bloc_attention\n::: bloc_attention-header\n::: bloc_attention-icon\n:::\n\n**Quel résultat choisir parmi les quatre solutions?**\n:::\n\n::: bloc_attention-body\nComme pour toute analyse de classification, votre choix peut être objectif et reposer uniquement sur des indicateurs statistiques (ici, le graphique des distances au *k* plus proche voisin). Il devrait aussi s'appuyer sur vos connaissances du terrain. Par exemple, l'identification d'un troisième agrégat avec une valeur d'epsilon fixée à 300 mètres pourrait refléter selon vous une réalité terrain particulièrement intéressante qui motiverait fortement le choix de cette solution.\n:::\n:::\n\n![Comparaison de solutions DBSCAN avec différentes valeurs d'epsilon](images/Chap04/DbscanResultatsOptimatisationEpsilon.png){#fig-DbscanResultatsOptimatisationEpsilon width=\"65%\" fig-align=\"center\"}\n\n::: bloc_aller_loin\n::: bloc_aller_loin-header\n::: bloc_aller_loin-icon\n:::\n\n**Autres algorithmes de classification non supervisée basée sur la densité**\n:::\n\n::: bloc_aller_loin-body\nBien que DBSCAN soit l'algorithme le plus utilisé, d'autres algorithmes basés sur la densité peuvent être utilisés pour détecter des agrégats spatiaux de points, notamment :\n\n-   HDBSCAN (***H**ierarchical **D**ensity-**B**ased **S**patial **C**lustering of **A**pplications with **N**oise*) [@HDBSCAN2013]. Brièvement, cette version modifiée de DBSCAN permet d'obtenir une hiérarchie de partitions, comme dans une classification ascendante hiérarchique.\n\n-   OPTICS (***O**rdering **P**oints **T**o **I**dentify the **C**lustering **S**tructure*) [@HDBSCAN2013]. Avec OPTICS, la distance de voisinage ($\\epsilon$) n'a pas besoin d'être spécifiée. Succinctement, pour chaque point du jeu de données, il utilise la distance au $k$ ($MinPts$) plus proche voisin.\n\n**Application à des évènements localisés sur un réseau de rues**\n\nLorsque les évènements sont localisés sur un réseau de rues (des accidents par exemple), il convient d'utiliser une autre métrique que la distance euclidienne pour le rayon de recherche ($\\epsilon$), soit la distance du chemin le plus court à travers le réseau de rues, ce que nous verrons au chapitre suivant ([section @sec-064]). Geoff Boeing a aussi proposé un [un code Python](https://geoffboeing.com/2018/04/network-based-spatial-clustering/) basé sur la librairie [OSMnx](https://geoffboeing.com/2016/11/osmnx-python-street-networks/).\n\n:::\n:::\n\n### ST-DBSCAN : agrégats spatio-temporels {#sec-0412}\n\nDerya Birant et Alp Kut [-@birant2007st] ont proposé une modification de l'algorithme de DBSCAN afin qu'il puisse s'appliquer à des données spatio-temporelles ($x$, $y$, $d$) avec $d$ étant la date de l'évènement. Dénommé ST-DBSCAN, l'algorithme comprend toujours les deux paramètres de DBSCAN ($MinPts$ et $\\epsilon$), auxquels s'ajoute un autre paramètre $\\epsilon$ pour le temps (défini en heure, jour, semaine, mois ou année). Autrement dit, deux paramètres de distance sont utilisés : $\\epsilon_1$ pour la proximité spatiale (comme avec DBSCAN) et $\\epsilon_2$ pour la proximité temporelle [@birant2007st]. De la sorte, deux points sont considérés comme voisins si la distance spatiale et la distance temporelle sont toutes deux inférieures aux seuils fixés.\n\n::: bloc_attention\n::: bloc_attention-header\n::: bloc_attention-icon\n:::\n\n**Fenêtre temporelle des points formant un agrégat**\n:::\n\n::: bloc_attention-body\nAttention, les points formant un agrégat peuvent avoir une fenêtre temporelle bien plus grande que le seuil $\\epsilon_2$ fixé. Par exemple, fixons les valeurs de $\\epsilon_1$ à 500 mètres et de $\\epsilon_2$ à 7 jours. Si le point A ($d$ = 2023-01-15) est distant de 400 mètres du point B ($d$ = 2023-01-20), les deux points sont considérés comme voisins. Par contre, si le point B est distant du point C ($d$ = 2023-01-25) de moins de 500 mètres, il peut être aussi agrégé à l'agrégat puisque l'écart temporel entre B et C est de 5 jours.\n\nHabituellement, plus la valeur de $\\epsilon_2$ est faible, plus le nombre de points considérés comme aberrants est important.\n:::\n:::\n\n### Mise en œuvre dans R {#sec-0414}\n\n#### DBSCAN {#sec-04141}\n\nNous utilisons le *package* `dbscan` [@dbscanPackage1; @dbscanPackage2] dans lequel sont implémentés plusieurs algorithmes, dont DBSCAN, mais aussi OPTICS et HDBSCAN. La fonction `dbscan(x, eps, minPts, weights = NULL)` comprend plusieurs paramètres :\n\n-   `x`: une matrice, un *DataFrame*, un objet `dist` ou un objet `frNN`.\n-   `eps`: le rayon de recherche epsilon ($\\epsilon$).\n-   `minPts`: le nombre de points minimum requis pour que chaque point soit considéré comme un point central.\n-   `weights`: un vecteur numérique optionnel pour pondérer les points.\n\nPour illustrer le fonctionnement de la méthode DBSCAN, nous avons extrait les accidents d'un [jeu de données sur les incidents de sécurité publique survenus sur le territoire de la Ville de Sherbrooke de juillet 2019 à juin 2022](https://donneesouvertes-sherbrooke.opendata.arcgis.com/datasets/64d19d62f0804f5896e4b24c32aea49d_0/explore?location=45.403675%2C-71.960143%2C12.65) (@fig-CartoAccidents).\n\n```{r}\n#| echo: false \n#| message: false \n#| warning: false\n#| label: fig-CartoAccidents\n#| fig-align: center\n#| fig-cap: Accidents survenus entre juillet 2019 et juin 2022, Ville de Sherbrooke\n#| out-width: 65%\n\nlibrary(sf)\nlibrary(tmap)\nlibrary(dbscan)\n## Importation des accidents\nAccidents <- st_read(dsn = \"data/chap04/DataAccidentsSherb.shp\", quiet=TRUE)\nArrondiss <- st_read(dsn = \"data/chap04/Arrondissements.shp\", quiet=TRUE)\ntmap_mode(\"plot\")\ntm_shape(Arrondiss)+tm_borders(col=\"black\")+tm_fill(col=\"#f7f7f7\")+\ntm_shape(Accidents)+tm_dots(col=\"red\", size = .1)+\n  tm_layout(frame = FALSE)+\n  tm_scale_bar(breaks  = c(0, 5, 10))\n```\n\nDans le code ci-dessous, nous réalisons trois étapes préalables au calcul de DBSCAN :\n\n-   Importation des accidents.\n-   Récupération des coordonnées ($x$, $y$) des accidents et stockage dans une matrice.\n-   Construction du graphique à partir de la distance au quatrième point le plus proche.\n\nNous n'observons pas de décrochement particulier dans la courbe de la @fig-GraphiqueAccidentsDist4. Par conséquent, nous pourrions tout aussi bien retenir une distance euclidienne de 250, 500, 1000 ou 1500 mètres pour epsilon.\n\n```{r}\n#| echo: true \n#| message: false \n#| warning: false\n#| label: fig-GraphiqueAccidentsDist4\n#| fig-align: center\n#| fig-cap: Optimisation de la valeur d’epsilon pour les accidents\n#| out-width: 65%\nlibrary(sf)\nlibrary(tmap)\nlibrary(dbscan)\nlibrary(ggplot2)\n## Importation des accidents\nAccidents.sf <- st_read(dsn = \"data/chap04/DataAccidentsSherb.shp\", quiet=TRUE)\n## Coordonnées géographiques\nxy <- st_coordinates(Accidents.sf)\n## Graphique pour la distance au quatrième voisin le plus proche\nDistKplusproche <- kNNdist(xy, k = 4)\nDistKplusproche <- as.data.frame(sort(DistKplusproche, decreasing = FALSE))\nnames(DistKplusproche) <- \"distance\"\nggplot(data = DistKplusproche)+\n  geom_path(aes(x = 1:nrow(DistKplusproche), y = distance), size=1)+\n  labs(x = \"Points triés par ordre croissant selon la distance\",\n       y = \"Distance au quatrième point le plus proche\")+\n  geom_hline(yintercept=250, color = \"#08306b\", linetype=\"dashed\", size=1)+\n  geom_hline(yintercept=500, color = \"#00441b\", linetype=\"dashed\", size=1)+\n  geom_hline(yintercept=1000, color = \"#67000d\", linetype=\"dashed\", size=1)+\n  geom_hline(yintercept=1500, color = \"#3f007d\", linetype=\"dashed\", size=1)\n```\n\nAppliquons la méthode DBSCAN avec un minimum de quatre points et les quatre valeurs de distance euclidienne.\n\n```{r}\n#| echo: true\n#| message: false\n#| warning: false\nset.seed(123456789)\n## DBSCAN avec les quatre distances\ndbscan250  <- dbscan(xy, eps = 250, minPts = 4)\ndbscan500  <- dbscan(xy, eps = 500, minPts = 4)\ndbscan1000 <- dbscan(xy, eps = 1000, minPts = 4)\ndbscan1500 <- dbscan(xy, eps = 1500, minPts = 4)\n## Affichage des résultats\ndbscan250\ndbscan500\ndbscan1000\ndbscan1500\n```\n\nPour les 1106 accidents du jeu de données, les résultats des quatre DBSCAN ci-dessus sont les suivants :\n\n-   Avec $\\epsilon = 250$, 45 agrégats et 353 points aberrants (bruit).\n-   Avec $\\epsilon = 500$, 33 agrégats et 143 points aberrants.\n-   Avec $\\epsilon = 1000$, 10 agrégats et 42 points aberrants.\n-   Avec $\\epsilon = 1500$, 3 agrégats et 7 points aberrants.\n\nPour les *n* points du jeu de données, l'appartenance à un agrégat est enregistrée dans un vecteur numérique avec des valeurs de 0 à *k* agrégats (`ResultatDbscan$cluster`). Notez que la valeur de 0 est attribuée aux points aberrants. Avec ce vecteur, nous enregistrons les résultats dans un nouveau champ de la couche de points `sf`.\n\n```{r}\n#| echo: true\n#| message: false\n#| warning: false\n## Enregistrement des résultats de DBSCAN dans la couche de points sf\nAccidents.sf$Dbscan250  <- as.character(dbscan250$cluster)\nAccidents.sf$Dbscan500  <- as.character(dbscan500$cluster)\nAccidents.sf$Dbscan1000 <- as.character(dbscan1000$cluster)\nAccidents.sf$Dbscan1500 <- as.character(dbscan1500$cluster)\n\nAccidents.sf$Dbscan250 <- ifelse(nchar(Accidents.sf$Dbscan250) == 1,\n                                        paste0(\"0\", Accidents.sf$Dbscan250),\n                                        Accidents.sf$Dbscan250)\nAccidents.sf$Dbscan500 <- ifelse(nchar(Accidents.sf$Dbscan500) == 1,\n                                        paste0(\"0\", Accidents.sf$Dbscan500),\n                                        Accidents.sf$Dbscan500)\nAccidents.sf$Dbscan1000 <- ifelse(nchar(Accidents.sf$Dbscan1000) == 1,\n                                        paste0(\"0\", Accidents.sf$Dbscan1000),\n                                        Accidents.sf$Dbscan1000)\nAccidents.sf$Dbscan1500 <- ifelse(nchar(Accidents.sf$Dbscan1500) == 1,\n                                        paste0(\"0\", Accidents.sf$Dbscan1500),\n                                        Accidents.sf$Dbscan1500)\n```\n\nNous cartographions finalement les résultats pour les quatre solutions.\n\n```{r}\n#| echo: true\n#| message: false\n#| warning: false\ntmap_mode(\"plot\")\ntm_shape(Accidents.sf)+tm_dots(col=\"Dbscan250\", title = \"DBSCAN 250\", size = .5)\ntm_shape(Accidents.sf)+tm_dots(col=\"Dbscan500\", title = \"DBSCAN 500\", size = .5)\ntm_shape(Accidents.sf)+tm_dots(col=\"Dbscan1000\", title = \"DBSCAN 1000\", size = .5)\ntm_shape(Accidents.sf)+tm_dots(col=\"Dbscan1500\", title = \"DBSCAN 1500\", size = .5)\n```\n\n#### ST-DBSCAN {#sec-04142}\n\nPour l'algorithme ST-DBSCAN, nous utilisons une [fonction R](https://github.com/CKerouanton/ST-DBSCAN/blob/master/stdbscan.R) proposée par Colin Kerouanton.\n\n```{r}\n#| echo: true\n#| message: false\n#| warning: false\nsource(\"code_complementaire/stdbscan.R\")\n```\n\nCalculons ST-DBSCAN avec une distance spatiale de 1000 mètres et une distance temporelle de 21 jours. Nous obtenons 26 agrégats et 584 points identifiés comme aberrants.\n\n```{r}\n#| echo: true\n#| message: false\n#| warning: false\n## Importation des accidents\nAccidents.sf <- st_read(dsn = \"data/chap04/DataAccidentsSherb.shp\", quiet=TRUE)\n## Coordonnées géographiques\nxy <- st_coordinates(Accidents.sf)\nAccidents.sf$x <- xy[,1]\nAccidents.sf$y <- xy[,2]\n## Vérifions que le champ DATEINCIDE est bien au format date\nstr(Accidents.sf$DATEINCIDE)\n## Calcul de st-dbscan avec une distance de 1000 mètres et 21 jours\nResultats.stdbscan <- stdbscan(x = Accidents.sf$x,\n                              y = Accidents.sf$y,\n                              time = Accidents.sf$DATEINCIDE,\n                              eps1 = 1000,\n                              eps2 = 21,\n                              minpts = 4)\n## Enregistrement des résultats de ST-DBSCAN dans la couche de points sf\nAccidents.sf$stdbscan.1000_21 <- as.character(Resultats.stdbscan$cluster)\nAccidents.sf$stdbscan.1000_21 <- ifelse(nchar(Accidents.sf$stdbscan.1000_21) == 1,\n                                        paste0(\"0\", Accidents.sf$stdbscan.1000_21),\n                                        Accidents.sf$stdbscan.1000_21)\n## Nombre de points par agrégat\ntable(Accidents.sf$stdbscan.1000_21)\n```\n\nPour faciliter l'analyse des résultats de ST-DBSCAN, nous conseillons de :\n\n1.  Construire un tableau récapitulatif pour les agrégats avec le nombre de points, les dates de début et de fin et l'intervalle temporel.\n2.  Construire un graphique avec les agrégats (axe des *y*) et la dimension temporelle (axe des *x*).\n3.  Cartographier les résultats.\n\nLe code ci-dessous génère le tableau récapitulatif. Nous constatons ainsi que les agrégats 9 et 10 incluent respectivement 178 et 156 points avec des intervalles temporels importants (respectivement 251 et 319 jours).\n\n```{r}\n#| echo: true\n#| message: false\n#| warning: false\nlibrary(dplyr)\n## Sélection des points appartenant à un agrégat\nAgregats <- subset(Accidents.sf, \n                   Accidents.sf$stdbscan.1000_21 != \"00\")\n## Conversion de la date au format POSIXct\nAgregats$dtPOSIXct <- as.POSIXct(Agregats$DATEINCIDE, format = \"%Y/%m/%d\")\n## Tableau récapitulatif\nlibrary(\"dplyr\")  \nTableau.stdbscan <-\n    st_drop_geometry(Agregats) %>%\n      group_by(stdbscan.1000_21) %>% \n      summarize(points = n(),\n                date.min = min(DATEINCIDE),\n                date.max = max(DATEINCIDE),\n                intervalle.jours = as.numeric(max(DATEINCIDE)-min(DATEINCIDE)))\n## Affichage du tableau\nprint(Tableau.stdbscan, n = nrow(Tableau.stdbscan))\n```\n\nLa @fig-GraphStScanEps1000Eps21 présente les points et l'étendue temporelle de chaque agrégat.\n\n```{r}\n#| echo: true \n#| message: false \n#| warning: false\n#| label: fig-GraphStScanEps1000Eps21\n#| fig-align: center\n#| fig-cap: Intervalles temporels des agrégats ST-DBSCAN\n#| out-width: 65%\n\n## Construction du graphique\nggplot(Agregats) + \n  geom_point(aes(x = dtPOSIXct, \n                 y = stdbscan.1000_21, \n                 color = stdbscan.1000_21),\n             show.legend = FALSE) +\n  scale_x_datetime(date_labels = \"%Y/%m\")+\n  labs(x= \"Temps\",\n       y= \"Identifiant de l'agrégat\",\n       title = \"ST-DBSCAN avec Esp1 = 1000, Esp2 = 21 et MinPts = 4\")\n```\n\nLa cartographie des agrégats est présentée à la @fig-CarteStScanEps1000Eps21 avec en noir les points aberrants.\n\n```{r}\n#| echo: true \n#| message: false \n#| warning: false\n#| label: fig-CarteStScanEps1000Eps21\n#| fig-align: center\n#| fig-cap: Agrégats identifiés avec ST-DBSCAN\n#| out-width: 65%\n\n## Création de deux couches : l'une pour les agrégats, l'autre pour les points aberrants\nstdbcan.Agregats <- subset(Accidents.sf, Accidents.sf$stdbscan.1000_21 != \"00\")\nstdbcan.Bruit    <- subset(Accidents.sf, Accidents.sf$stdbscan.1000_21 == \"00\")\n## Cartographie\ntmap_mode(\"plot\")\ntm_shape(Arrondiss)+tm_fill(col=\"#f7f7f7\")+tm_borders(col=\"black\")+\ntm_shape(stdbcan.Bruit)+\n  tm_dots(shape = 21, col=\"black\", size=.2)+\n  tm_shape(stdbcan.Agregats)+\n  tm_dots(shape = 21, col=\"stdbscan.1000_21\", size=.2, title = \"Agrégat\")+\ntm_layout(frame = FALSE, legend.position = c(\"center\", \"bottom\"),\n          legend.text.size = .85, legend.outside = TRUE)\n```\n\n## Méthodes de balayage de Kulldorff {#sec-042}\n\n### Objectifs de la méthode, types d'analyses, de modèles et d'agrégats {#sec-0421}\n\n### Principes de base de la méthode {#sec-0422}\n\n#### Type de balayage (cercle ou ellipse) {#sec-04221}\n\n#### Variable de contrôle {#sec-04222}\n\n### Mise en œuvre dans R {#sec-043}\n\n#### Agrégats temporels, spatiaux et spatio-temporels {#sec-0431}\n\n#### Introduction de variables de contrôle {#sec-0432}\n\n#### Exploration d'autres types de modèles {#sec-0434}\n\n## Quiz de révision du chapitre {#sec-044}\n\n```{r}\n#| label: quizChapitre04\n#| echo: false \n#| eval: true \n#| message: false \n#| warning: false \n#| results: asis\n\nsource(\"code_complementaire/QuizzFunctions.R\")\nChap04Quiz <- quizz(\"quiz/Chap04.yml\", \"Chap04\")\nrender_quizz(Chap04Quiz)\n```\n\n## Exercices de révision {#sec-045}\n\n::: bloc_exercice\n::: bloc_exercice-header\n::: bloc_exercice-icon\n:::\n\n**Exercice 1.** Application de l'algorithme DBSCAN\n:::\n\n::: bloc_exercice-body\nL'objectif est d'appliquer cet algorithme sur des accidents impliquant des personnes à vélo sur l'île de Montréal (voir la [section @sec-04141]). Ces données ouvertes sur les collisions routières et leur documentation sont disponibles au [lien suivant](https://donnees.montreal.ca/dataset/collisions-routieres).\n\n```{r}\n#| echo: true \n#| message: false \n#| warning: false \n#| eval: false\nlibrary(sf)\nlibrary(tmap)\nlibrary(dbscan)\nlibrary(ggplot2)\n## Importation des données\nCollissions <- st_read(dsn = \"data/chap04/collisions.gpkg\", \n                       layer = \"CollisionsRoutieres\", \n                       quiet = TRUE)\n## Collisions impliquant au moins une personne à vélo en 2020 et 2021\nColl.Velo <- subset(Collissions,\n                    Collissions$NB_VICTIMES_VELO > 0 &\n                      Collissions$AN %in% c(2020, 2021))\n## Coordonnées géographiques\nxy <- st_coordinates(Coll.Velo)\n## Graphique pour la distance au quatrième voisin le plus proche\nDistKplusproche <- kNNdist(xy, k = 4)\nDistKplusproche <- as.data.frame(sort(DistKplusproche, decreasing = FALSE))\nnames(DistKplusproche) <- \"distance\"\nggplot(à compléter)+\n  geom_path(à compléter)+\n  labs(à compléter)+\n  geom_hline(yintercept=250, color = \"#08306b\", linetype=\"dashed\", size=1)+\n  geom_hline(yintercept=500, color = \"#00441b\", linetype=\"dashed\", size=1)+\n  geom_hline(yintercept=1000, color = \"#67000d\", linetype=\"dashed\", size=1)\n## DBSCAN avec les quatre distances\nset.seed(123456789)\ndbscan250  <- à compléter\ndbscan500  <- à compléter\ndbscan1000 <- à compléter\n## Affichage des résultats\ndbscan250\ndbscan500\ndbscan1000\n## Enregistrement dans la couche de points sf Coll.Velo\nColl.Velo$dbscan250 <- à compléter\nColl.Velo$dbscan500 <- à compléter\nColl.Velo$dbscan1000 <- à compléter\n\nColl.Velo$dbscan250 <- ifelse(nchar(Coll.Velo$dbscan250) == 1,\n                              paste0(\"0\", Coll.Velo$dbscan250),\n                              Coll.Velo$dbscan250)\nColl.Velo$dbscan500 <- ifelse(nchar(Coll.Velo$dbscan500) == 1,\n                               paste0(\"0\", Coll.Velo$dbscan500),\n                               Coll.Velo$dbscan500)\nColl.Velo$dbscan1000 <- ifelse(nchar(Coll.Velo$dbscan1000) == 1,\n                               paste0(\"0\", Coll.Velo$dbscan1000),\n                               Coll.Velo$dbscan1000)\n# Extraction des agrégats\nAgregats.dbscan250  <- subset(Coll.Velo, dbscan250 != \"00\")\nAgregats.dbscan500  <- subset(Coll.Velo, dbscan500 != \"00\")\nAgregats.dbscan1000 <- subset(Coll.Velo, dbscan1000 != \"00\")\n## Cartographie\ntmap_mode(\"plot\")\nà compléter\n```\n\nCorrection à la [section @sec-12041].\n:::\n:::\n\n::: bloc_exercice\n::: bloc_exercice-header\n::: bloc_exercice-icon\n:::\n\n**Exercice 2.** Application de l'algorithme ST-DBSCAN\n:::\n\n::: bloc_exercice-body\nAvec le même jeu de données, réaliser un ST-DBSCAN avec les paramètres suivants : distance spatiale de 500 mètres, distance temporelle de 30 jours et quatre points minimum (voir la [section @sec-04142]).\n\n```{r}\n#| echo: true \n#| message: false \n#| warning: false \n#| eval: false\nlibrary(sf)\nlibrary(tmap)\nlibrary(dbscan)\nlibrary(ggplot2)\n## Importation des données\nCollissions <- st_read(dsn = \"data/chap04/collisions.gpkg\", \n                       layer = \"CollisionsRoutieres\",\n                       quiet = TRUE)\n## Collisions impliquant au moins une personne à vélo en 2020 et 2021\nColl.Velo <- subset(Collissions,\n                    Collissions$NB_VICTIMES_VELO > 0 &\n                      Collissions$AN %in% c(2020, 2021))\n## Coordonnées géographiques\nxy <- st_coordinates(Coll.Velo)\nColl.Velo$x <- xy[,1]\nColl.Velo$y <- xy[,2]\n## Conversion du champ DT_ACCDN au format Date\nColl.Velo$DT_ACCDN <- as.Date(Coll.Velo$DT_ACCDN)\n## ST-DBSCAN avec eps1 = 500, esp2 = 30 et minpts = 4\nResultats.stdbscan <- stdbscan(À compléter)\n## Enregistrement des résultats ST-DBSCAN dans la couche de points sf\nColl.Velo$stdbscan <- as.character(Resultats.stdbscan$cluster)\nColl.Velo$stdbscan <- ifelse(nchar(Coll.Velo$stdbscan) == 1,\n                             paste0(\"0\", Coll.Velo$stdbscan),\n                             Coll.Velo$stdbscan)\n## Nombre de points par agrégat avec la fonction table\ntable(Coll.Velo$stdbscan)\n## Sélection des points appartenant à un agrégat avec la fonction subset\nAgregats <- subset(Coll.Velo, stdbscan != \"00\")\n## Conversion de la date au format POSIXct\nAgregats$dtPOSIXct <- as.POSIXct(Agregats$DT_ACCDN, format = \"%Y/%m/%d\")\n## Tableau récapitulatif\nlibrary(\"dplyr\")  \nTableau.stdbscan <- À compléter\n## Affichage du tableau\nprint(Tableau.stdbscan, n = nrow(Tableau.stdbscan))\n## Construction du graphique\nÀ compléter\n## Création d'une couche pour les agrégats\nstdbcan.Agregats <- subset(Coll.Velo, stdbscan != \"00\")\n## Cartographie\nÀ compléter\n```\n\nCorrection à la [section @sec-12042].\n:::\n:::\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":true,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["css/quizlib.min.css"],"output-file":"04-AgregatsSpatiaux.html"},"language":{"toc-title-document":"Table des matières","toc-title-website":"Sur cette page","related-formats-title":"Autres formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"La source","other-links-title":"Autres liens","code-links-title":"Liens de code","launch-dev-container-title":"Lancer le Dev Container","launch-binder-title":"Lancer le Binder","article-notebook-label":"Cahier d'articles","notebook-preview-download":"Télécharger le cahier","notebook-preview-download-src":"Télécharger le code source","notebook-preview-back":"Retour à l'article","manuscript-meca-bundle":"Archive MECA","section-title-abstract":"Résumé","section-title-appendices":"Annexes","section-title-footnotes":"Notes de bas de page","section-title-references":"Les références","section-title-reuse":"Réutilisation","section-title-copyright":"Droits d'auteur","section-title-citation":"Citation","appendix-attribution-cite-as":"Veuillez citer ce travail comme suit :","appendix-attribution-bibtex":"BibTeX","appendix-view-license":"Voir la Licence","title-block-author-single":"Auteur·rice","title-block-author-plural":"Auteurs","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Date de publication","title-block-modified":"Modifié","title-block-keywords":"Mots clés","callout-tip-title":"Astuce","callout-note-title":"Note","callout-warning-title":"Avertissement","callout-important-title":"Important","callout-caution-title":"Mise en garde","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Montrer tout le code","code-tools-hide-all-code":"Cacher tout le code","code-tools-view-source":"Voir les sources","code-tools-source-code":"Code source","tools-share":"Share","tools-download":"Download","code-line":"Ligne","code-lines":"Lignes","copy-button-tooltip":"Copier vers le presse-papier","copy-button-tooltip-success":"Copié","repo-action-links-edit":"Modifier cette page","repo-action-links-source":"Voir la source","repo-action-links-issue":"Signaler un problème ou<br>formuler une suggestion","back-to-top":"Retour au sommet","search-no-results-text":"Pas de résultats","search-matching-documents-text":"documents trouvés","search-copy-link-title":"Copier le lien vers la recherche","search-hide-matches-text":"Cacher les correspondances additionnelles","search-more-match-text":"correspondance de plus dans ce document","search-more-matches-text":"correspondances de plus dans ce document","search-clear-button-title":"Effacer","search-text-placeholder":"","search-detached-cancel-button-title":"Annuler","search-submit-button-title":"Envoyer","search-label":"Recherche","toggle-section":"Basculer la section","toggle-sidebar":"Basculer la barre latérale","toggle-dark-mode":"Basculer le mode sombre","toggle-reader-mode":"Basculer en mode lecteur","toggle-navigation":"Basculer la navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Théorème","crossref-lem-title":"Lemme","crossref-cor-title":"Corollaire","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Définition","crossref-exm-title":"Exemple","crossref-exr-title":"Exercice","crossref-ch-prefix":"Chapitre","crossref-apx-prefix":"Annexe","crossref-sec-prefix":"Section","crossref-eq-prefix":"Équation","crossref-lof-title":"Liste des Figures","crossref-lot-title":"Liste des Tables","crossref-lol-title":"Liste des Listings","environment-proof-title":"Preuve","environment-remark-title":"Remarque","environment-solution-title":"Solution","listing-page-order-by":"Trier par","listing-page-order-by-default":"Ordre par défaut","listing-page-order-by-date-asc":"Le plus ancien","listing-page-order-by-date-desc":"Le plus récent","listing-page-order-by-number-desc":"Descendant","listing-page-order-by-number-asc":"Ascendant","listing-page-field-date":"Date","listing-page-field-title":"Titre","listing-page-field-description":"Description","listing-page-field-author":"Auteur·rice","listing-page-field-filename":"Nom de fichier","listing-page-field-filemodified":"Modifié","listing-page-field-subtitle":"Sous-titre","listing-page-field-readingtime":"Temps de lecture","listing-page-field-wordcount":"Compteur de Mots","listing-page-field-categories":"Catégories","listing-page-minutes-compact":"{0} min.","listing-page-category-all":"Tous","listing-page-no-matches":"Aucun article correspondant","listing-page-words":"{0} mots","listing-page-filter":"Filtre","draft":"Brouillon"},"metadata":{"lang":"fr","fig-responsive":true,"quarto-version":"1.6.42","license":"CC BY-SA","crossref":{"lof-title":"Liste des figures","lot-title":"Listes des tableaux","fig-prefix":"figure","tbl-prefix":"tableau","sec-prefix":"section","eq-prefix":"équation","fig-title":"Figure","tbl-title":"Tableau","eq-title":"Équation"},"bibliography":["references.bib"],"csl":"StyleRefs.csl","colorlinks":true,"theme":{"light":["cosmo","css/r4ds.scss"]},"fontsize":"11pt","mainfont":"Helvetica Neue,Helvetica,Arial,sans-serif","monofont":"SFMono-Regular,Menlo,Monaco,Consolas,\"Liberation Mono\",\"Courier New\",monospace"},"extensions":{"book":{"multiFile":true}}},"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":100,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"pdflatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","filters":["lua/callout_custom_pdf.lua"],"output-file":"Méthodes_analyses_spatiales.pdf","toc":true,"toc-depth":4,"include-in-header":["tex-hacks/color-tables.tex","tex-hacks/code-font.tex","tex-hacks/fix-unicode-chars.tex","tex-hacks/image-on-title-page.tex","tex-hacks/callout.tex"]},"language":{"toc-title-document":"Table des matières","toc-title-website":"Sur cette page","related-formats-title":"Autres formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"La source","other-links-title":"Autres liens","code-links-title":"Liens de code","launch-dev-container-title":"Lancer le Dev Container","launch-binder-title":"Lancer le Binder","article-notebook-label":"Cahier d'articles","notebook-preview-download":"Télécharger le cahier","notebook-preview-download-src":"Télécharger le code source","notebook-preview-back":"Retour à l'article","manuscript-meca-bundle":"Archive MECA","section-title-abstract":"Résumé","section-title-appendices":"Annexes","section-title-footnotes":"Notes de bas de page","section-title-references":"Les références","section-title-reuse":"Réutilisation","section-title-copyright":"Droits d'auteur","section-title-citation":"Citation","appendix-attribution-cite-as":"Veuillez citer ce travail comme suit :","appendix-attribution-bibtex":"BibTeX","appendix-view-license":"Voir la Licence","title-block-author-single":"Auteur·rice","title-block-author-plural":"Auteurs","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Date de publication","title-block-modified":"Modifié","title-block-keywords":"Mots clés","callout-tip-title":"Astuce","callout-note-title":"Note","callout-warning-title":"Avertissement","callout-important-title":"Important","callout-caution-title":"Mise en garde","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Montrer tout le code","code-tools-hide-all-code":"Cacher tout le code","code-tools-view-source":"Voir les sources","code-tools-source-code":"Code source","tools-share":"Share","tools-download":"Download","code-line":"Ligne","code-lines":"Lignes","copy-button-tooltip":"Copier vers le presse-papier","copy-button-tooltip-success":"Copié","repo-action-links-edit":"Modifier cette page","repo-action-links-source":"Voir la source","repo-action-links-issue":"Signaler un problème ou<br>formuler une suggestion","back-to-top":"Retour au sommet","search-no-results-text":"Pas de résultats","search-matching-documents-text":"documents trouvés","search-copy-link-title":"Copier le lien vers la recherche","search-hide-matches-text":"Cacher les correspondances additionnelles","search-more-match-text":"correspondance de plus dans ce document","search-more-matches-text":"correspondances de plus dans ce document","search-clear-button-title":"Effacer","search-text-placeholder":"","search-detached-cancel-button-title":"Annuler","search-submit-button-title":"Envoyer","search-label":"Recherche","toggle-section":"Basculer la section","toggle-sidebar":"Basculer la barre latérale","toggle-dark-mode":"Basculer le mode sombre","toggle-reader-mode":"Basculer en mode lecteur","toggle-navigation":"Basculer la navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Théorème","crossref-lem-title":"Lemme","crossref-cor-title":"Corollaire","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Définition","crossref-exm-title":"Exemple","crossref-exr-title":"Exercice","crossref-ch-prefix":"Chapitre","crossref-apx-prefix":"Annexe","crossref-sec-prefix":"Section","crossref-eq-prefix":"Équation","crossref-lof-title":"Liste des Figures","crossref-lot-title":"Liste des Tables","crossref-lol-title":"Liste des Listings","environment-proof-title":"Preuve","environment-remark-title":"Remarque","environment-solution-title":"Solution","listing-page-order-by":"Trier par","listing-page-order-by-default":"Ordre par défaut","listing-page-order-by-date-asc":"Le plus ancien","listing-page-order-by-date-desc":"Le plus récent","listing-page-order-by-number-desc":"Descendant","listing-page-order-by-number-asc":"Ascendant","listing-page-field-date":"Date","listing-page-field-title":"Titre","listing-page-field-description":"Description","listing-page-field-author":"Auteur·rice","listing-page-field-filename":"Nom de fichier","listing-page-field-filemodified":"Modifié","listing-page-field-subtitle":"Sous-titre","listing-page-field-readingtime":"Temps de lecture","listing-page-field-wordcount":"Compteur de Mots","listing-page-field-categories":"Catégories","listing-page-minutes-compact":"{0} min.","listing-page-category-all":"Tous","listing-page-no-matches":"Aucun article correspondant","listing-page-words":"{0} mots","listing-page-filter":"Filtre","draft":"Brouillon"},"metadata":{"block-headings":true,"license":"CC BY-SA","lang":"fr","crossref":{"lof-title":"Liste des figures","lot-title":"Listes des tableaux","fig-prefix":"figure","tbl-prefix":"tableau","sec-prefix":"section","eq-prefix":"équation","fig-title":"Figure","tbl-title":"Tableau","eq-title":"Équation"},"bibliography":["references.bib"],"csl":"StyleRefs.csl","documentclass":"scrbook","papersize":"letter","classoption":["open=any","twoside=false","french"],"hyperrefoptions":["pdfpagemode=UseOutlines","pdfdisplaydoctitle=true","pdfpagelayout=SinglePage","pdfstartpage=1"],"geometry":["top=20mm","left=15mm","right=15mm","heightrounded"],"fontfamily":"libertinus","fontfamilyoptions":["p"],"lof":true,"lot":true,"code-block-border-left":false,"fontsize":"11pt","urlcolor":"Green4","citecolor":"violet","linkcolor":"violet","colorlinks":true,"header-includes":["\\usepackage{xparse}","\\renewcommand{\\thepart}{} % Enlever numérotation des parties","\\setcounter{secnumdepth}{3} % Activer la numérotation des sections jusqu'au niveau des sous-sections"]},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["html","pdf"]}