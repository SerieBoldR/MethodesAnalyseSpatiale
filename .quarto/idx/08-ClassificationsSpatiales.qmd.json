{"title":"Méthodes de classification non supervisée spatiale","markdown":{"headingText":"Méthodes de classification non supervisée spatiale","headingAttr":{"id":"sec-chap08","classes":[],"keyvalue":[]},"containsRefs":false,"markdown":"\nLes méthodes de classification visent à regrouper des observations d'un jeu de données en plusieurs classes en fonction de leurs caractéristiques évaluées à partir de plusieurs variables. Appliquées à une couche spatiale (polygones, points, lignes), il s'agit alors de classifier les unités spatiales sur la base de plusieurs de leurs attributs mesurés à partir de variables. Dans le cadre de ce chapitre, nous abordons deux principales familles de méthodes de classification non supervisée : **celle avec une contrainte spatiale** (algorithmes AZP, SKATER, REDCAP) et **celle avec une dimension spatiale** (*ClustGeo* et classification floue c-moyennes spatiale).\n\nSommairement, les deux dernières méthodes sont des extensions spatiales de la classification ascendante hiérarchique (CAH) et de l'algorithme flou c-moyennes. Par conséquent, la lecture de ce chapitre nécessite de bien maîtriser le fonctionnement de la CAH et des k-moyennes (*k-means*). Si ce n'est pas le cas, nous vous invitons vivement à lire le [chapitre suivant](https://serieboldr.github.io/MethodesQuantitatives/13-MethodeClassification.html) [@RBoldAir].\n\n::: bloc_attention\n::: bloc_attention-header\n::: bloc_attention-icon\n:::\n\n**Bref retour sur les méthodes de classification**\n:::\n\n::: bloc_attention-body\nIl existe de nombreuses méthodes de classification. Nous distinguons habituellement plusieurs familles de méthodes de classification, celles non supervisées versus supervisées et celles strictes versus floues :\n\n-   **Les méthodes de classification non supervisée** « \\[...\\] relèvent de la statistique exploratoire multidimensionnelle et permettent de regrouper automatiquement les observations sans avoir de connaissance préalable sur la nature des classes présentes dans l'ensemble de données [@lebart1995statistique]. Les méthodes les plus connues dans ce domaine sont l'algorithme de Classification ascendante hiérarchique (CAH) et la méthode des k-moyennes (*k-means*) » [@ClassificationFloue, p. 1]. À cela s'ajoutent d'autres méthodes comme les k-médianes [@jain1988algorithms] ou encore les k-médoïdes [@kaufman1990partitioning] et la classification mixte combinant k-moyennes et CAH [@lebart1995statistique]. Pour regrouper les observations, ces méthodes (CAH, k-moyennes, k-médianes, k-médoïdes, classification mixte) sont basées sur la distance (proximité) entre les observations tandis que d'autres méthodes sont basées sur la densité des observations (algorithmes DBSCAN, HDBSCAN, STDBSCAN, OPTICS abordés à la [section @sec-041]).\n\n-   **Les méthodes de classification supervisée** « \\[...\\] permettent d'affecter des observations à partir d'un échantillon déjà classifié, souvent appelé classe d'entraînement. Parmi les méthodes supervisées les plus connues, on retrouve les forêts d'arbres décisionnels, les réseaux de neurones artificiels et l'analyse factorielle discriminante » [@ClassificationFloue, p. 1]. Plus exactement, ces méthodes visent à apprendre des règles basées sur les attributs des observations pour déterminer à quel groupe chaque observation doit être attribuée. Ces règles peuvent ensuite être utilisées pour déterminer la catégorie de nouvelles observations.\n\n-   Que la classification soit ou non supervisée, « on distingue généralement les **méthodes strictes** (ou de partition) des **méthodes floues**. \\[...\\] Dans une classification stricte, chaque observation appartient à une seule classe : mathématiquement, l'appartenance à une classe donnée est binaire (0 ou 1), tandis que dans une classification floue, chaque observation a une probabilité d'appartenance variant de 0 à 1 pour chacune des classes » [@ClassificationFloue, p. 1-2].\n:::\n:::\n\n**Pourquoi recourir à des méthodes de classification non supervisée spatiale?**\n\nDans un article récent, Gelb et Apparicio [-@ClassificationFloue] identifient deux principales limites à l'application d'une méthode de classification non supervisée a-spatiale (comme le CAH et le *k-means*) sur des données spatiales :\n\n1.  **La non-prise en compte de la dimension spatiale constitue une perte d'information :** « \\[...\\]  une partie de l'information propre aux données, à savoir leur localisation, n'est pas prise en compte dans le processus de classification. Or, la dimension géographique est souvent très structurante; par conséquent, l'occulter revient à perdre une quantité non négligeable d'information. Il convient toutefois de nuancer quelque peu ce propos. Généralement, la cartographie des méthodes de classification non supervisée a-spatiale (CAH et *k-means*) révèlent des effets de voisinage, d'autant plus que les variables introduites dans la classification sont fortement autocorrélées positivement » [@ClassificationFloue, p. 6].\n2.  **Limiter l'effet de mitage** : « \\[...\\] dans un contexte d'autocorrélation spatiale positive, des observations proches spatialement devraient plus vraisemblablement appartenir au même groupe. Avec les méthodes de classification a-spatiale, il est fréquent d'observer des phénomènes de mitage, c'est-à-dire des observations appartenant à un groupe *b* et isolées au milieu d'un ensemble d'observations appartenant au groupe *a*. Ce phénomène peut s'expliquer par la présence ici et là d'autocorrélation spatiale locale négative, c'est-à-dire des observations dont les caractéristiques sémantiques diffèrent de leurs voisines. Souvent, la dissimilarité sémantique entre ces observations est négligeable et ne justifie pas cette rupture spatiale » [@ClassificationFloue, p. 6].\n\n::: bloc_package\n::: bloc_package-header\n::: bloc_package-icon\n:::\n\n**Liste des *packages* utilisés dans ce chapitre**\n:::\n\n::: bloc_package-body\n-   Pour importer et manipuler des fichiers géographiques :\n    -   `sf` pour importer et manipuler des données vectorielles.\n    -   `spdep` pour construire des matrices de pondération spatiale.\n-   Pour construire des cartes et des graphiques :\n    -   `tmap` est certainement le meilleur *package* pour la cartographie.\n    -   `ggplot2` pour construire des graphiques.\n    -   `ggpubr` pour combiner des graphiques.\n-   Pour les méthodes de classification avec une contrainte spatiale :\n    -   `rgeoda` pour les algorithmes AZP, SKATER et REDCAP.\n    -   `spdep` pour l'algorithme SKATER.\n-   Pour les méthodes de classification avec une dimension spatiale :\n    -   `ClustGeo` pour la méthode ClustGeo.\n    -   `geocmeans` pour la classification k-moyennes floue et spatiale.\n:::\n:::\n\n## Méthodes de classification non supervisée avec contrainte spatiale {#sec-081}\n\nNous avons vu que l'objectif d'une méthode non supervisée appliquée à des données spatiales est de regrouper en *n* classes les unités spatiales d'une couche géographique. Prenons l'exemple de quatre variables environnementales cartographiées à la @fig-figVarEnv pour les IRIS de la ville de Lyon, dont trois considérées comme des nuisances (bruit, dioxyde d'azote et particules fines) et une considérée comme avantageuse (végétation).\n\n```{r}\n#| echo: false \n#| message: false \n#| warning: false\n#| label: fig-figVarEnv\n#| fig-align: center\n#| fig-cap: \"Cartographie des variables environnementales\"\n#| out-width: 100%\n\nload(\"data/chap08/DonneesLyon.Rdata\")\nlibrary(sf)\nlibrary(tmap)\nlibrary(spdep)\nlibrary(rgeoda)\ntmap_mode(\"plot\")\nCarte.Lden <- tm_shape(LyonIris)+\n  tm_fill(col=\"Lden\", n = 5, style = \"quantile\", palette = \"YlOrRd\", title=\"Lden\", legend.format = list(text.separator = \"à\")) +\n  tm_layout(frame=FALSE, \n            main.title = \"Bruit\", \n            main.title.position = \"center\", \n            main.title.size = 1)\nCarte.NO2 <- tm_shape(LyonIris)+\n  tm_fill(col=\"NO2\", n = 5, style = \"quantile\", palette = \"YlOrRd\", title=\"µg/m3\", legend.format = list(text.separator = \"à\")) +\n  tm_layout(frame=FALSE, \n            main.title = \"Dixoyde d'azote\", \n            main.title.position = \"center\", \n            main.title.size = 1)\nCarte.PM25 <- tm_shape(LyonIris)+\n  tm_fill(col=\"PM25\", n = 5, style = \"quantile\", palette = \"YlOrRd\", title=\"µg/m3\", legend.format = list(text.separator = \"à\")) +\n  tm_layout(frame=FALSE, \n            main.title = \"Particule fines (PM2,5)\", \n            main.title.position = \"center\", \n            main.title.size = 1)\nCarte.Vege <- tm_shape(LyonIris)+\n  tm_fill(col=\"VegHautPrt\", n = 5, style = \"quantile\", palette = \"YlOrRd\", title=\"En %\", legend.format = list(text.separator = \"à\")) +\n  tm_layout(frame=FALSE, \n            main.title = \"Canopée\", \n            main.title.position = \"center\", \n            main.title.size = 1) + tm_scale_bar(breaks = c(0,5,10))\ntmap_arrange(Carte.Lden, Carte.NO2, Carte.PM25, Carte.Vege, ncol = 2)\n```\n\nIl est possible de regrouper les unités spatiales avec ou sans contrainte spatiale :\n\n-   **Sans contrainte spatiale**, nous cherchons à regrouper les IRIS (unités spatiales) avec des valeurs similaires pour les quatre variables retenues (L~den~, NO~2~, PM~2,5~ et pourcentage de canopée). Cette approche est illustrée à la @fig-figKmeansSkater (a) avec l'algorithme k-moyennes (*k-means* en anglais) avec cinq classes.\n\n-   **Avec contrainte spatiale**, nous cherchons à regrouper les IRIS (unités spatiales) avec des valeurs similaires pour les quatre variables retenues, tout en nous assurant que les regroupements forment des régions avec une absence de mitage. Cette approche est illustrée à la @fig-figKmeansSkater (b) avec l'algorithme SKATER (*Spatial 'K'luster Analysis by Tree Edge Removal*) avec cinq classes. Autrement dit, l'objectif des méthodes de classification non supervisée avec contrainte spatiale est d'agréger *n* unités spatiales en *m* régions non discontinues (avec *n* \\< *m*) et cohérentes du point de vue de leurs attributs [@openshaw1995algorithms, p. 428].\n\n```{r}\n#| echo: false \n#| message: false \n#| warning: false\n#| label: fig-figKmeansSkater\n#| fig-align: center\n#| fig-cap: \"Classification non supervisée avec et sans contrainte spatiale\"\n#| out-width: 85%\n\nset.seed(123)\nVarsEnv <- c(\"Lden\", \"NO2\", \"PM25\", \"VegHautPrt\")\nData <- data.frame(scale(st_drop_geometry(LyonIris)[VarsEnv]))\n# Kmeans\nLyonIris$Kmeans5 <- as.character(kmeans(Data[, VarsEnv], centers = 5, iter.max = 100)$cluster)\n# Skater\nLyon.nb <- poly2nb(LyonIris)\nlcosts <- nbcosts(Lyon.nb, Data)\nLyon.w <- nb2listw(Lyon.nb, lcosts, style=\"B\")\nLyon.mst <- mstree(Lyon.w)\nSkater5 <- spdep::skater(edges = Lyon.mst[,1:2], data = Data, method = \"euclidean\", ncuts = 4)\nLyonIris$Skater5 <- as.character(Skater5$groups)\n  # Cartographie\nCarte.kmeans <-\n  tm_shape(LyonIris)+\n  tm_borders(col=\"gray\", lwd=.5)+\n  tm_fill(col=\"Kmeans5\", palette = \"Set1\", title =\"\")+\n  tm_layout(frame=FALSE, \n            main.title = \"a. Sans contrainte spatiale\", \n            main.title.position = \"center\", \n            main.title.size = 1)\nCarte.skater <-\n  tm_shape(LyonIris)+\n  tm_borders(col=\"gray\", lwd=.5)+\n  tm_fill(col=\"Skater5\", palette = \"Set1\", title =\"\")+\n  tm_layout(frame=FALSE, \n            main.title = \"b. Avec contrainte spatiale\", \n            main.title.position = \"center\", \n            main.title.size = 1)+\n  tm_scale_bar(breaks = c(0,5,10))\nLyonIris$Skater5 <- NULL\ntmap_mode(\"plot\")\ntmap_arrange(Carte.kmeans, Carte.skater, ncol = 2, nrow = 1)\n```\n\n::: bloc_objectif\n::: bloc_objectif-header\n::: bloc_objectif-icon\n:::\n\n**Intérêt et limites des méthodes de classification avec une contrainte spatiale**\n:::\n\n::: bloc_objectif-body\nSelon Gelb et Apparicio [-@ClassificationFloue, p. 7], le résultat d'une méthode de classification avec une contrainte spatiale est « la création de régions très cohérentes spatialement, c'est-à-dire avec une absence de mitage. Autrement dit, avec ces méthodes, il n'est pas possible d'identifier de groupes qui seraient spatialement discontinus, c'est-à-dire composés de plusieurs ensembles régionaux séparés. L'impossibilité d'obtenir du mitage au sein des différentes régions peut masquer la présence de valeurs fortement dissemblables localement, malgré la prise en compte de l'espace. Or, ces observations systématiquement différentes de leurs voisines doivent faire l'objet d'une attention particulière dans les exercices de classification intégrant l'espace, ce que ne permettent pas ces méthodes d'agrégation spatiale.\n\nLes limites de ces méthodes, particulièrement celles relatives au mitage, ont conduit plus récemment à la mise au point de nouvelles méthodes incluant l'espace dans le processus de classification, sans imposer une contrainte de contiguïté. Plus spécifiquement, ces nouvelles méthodes sont des modifications des algorithmes classiques, tels que la CAH ou le FCM, pour intégrer la dimension spatiale en parallèle à la dimension sémantique des données. En d'autres termes, l'espace n'est plus intégré comme une contrainte dans les algorithmes de classification, mais plutôt comme une donnée supplémentaire ».\n:::\n:::\n\nLes principaux algorithmes de classification non supervisée avec contrainte spatiale (*Spatially Constrained Clustering Methods* en anglais) sont :\n\n-   La méthode de zonage automatique (*Automatic Zoning Procedure* en anglais) (AZP) proposée par Openshaw [-@openshaw1977geographical], puis améliorée par Openshaw et Rao [-@openshaw1995algorithms].\n\n-   L'algorithme SKATER (*Spatial 'K'luster Analysis by Tree Edge Removal*) [@assunccao2006efficient].\n\n-   L'algorithme REDCAP (*Regionalization with dynamically constrained agglomerative clustering and partitioning*) [@guo2008regionalization].\n\n-   L'algorithme du *max-p-regions problem* [@duque2012max].\n\nPour mettre en œuvre ces différents algorithmes, nous utilisons le *package* `rgeoda` [@packagergeoda]. Notez que l'algorithme SKATER est aussi implémenté dans le *package* `spded` (fonction `skater`).\n\n### Algorithmes AZP {#sec-0811}\n\nL'algorithme AZP (*Automatic Zoning Problem*) est une approche itérative et heuristique visant à regrouper des polygones adjacents en *m* régions, tout en maximisant la variance interrégionale (variance interclasse) et en minimisant la variance intrarégionale (variance intraclasse) calculées sur les *p* variables. Autrement dit, il vise à créer des régions non discontinues les plus homogènes possibles et les plus dissemblables entre elles sur la base des *p* variables. Pour utiliser l'AZP, il faut spécifier le nombre de régions (*m*) désiré. Notez qu'il existe trois algorithmes pour l'AZP :\n\n1.  AZP (*Automatic Zoning Procedure*), soit la première version par Stan Openshaw [-@openshaw1977geographical].\n2.  AZP-SA (*A simulated annealing AZP method*) [@openshaw1995algorithms].\n3.  AZP-TABU (*A tabu search heuristic version of AZP*) [@openshaw1995algorithms].\n\nPour une description détaillée de ces trois algorithmes, vous pouvez consulter Openshaw et Rao [-@openshaw1995algorithms] ou encore le [lien suivant](https://geodacenter.github.io/workbook/9d_spatial4/lab9d.html#principle).\n\nAppliquons ces algorithmes aux 506 IRIS de la ville de Lyon avec les quatre variables environnementales préalablement centrées réduites (bruit, dioxyde d'azote, particules fines et pourcentage de végétation) et une matrice de contiguïté selon le partage d'un nœud. Le *package* `rgeoda` comprend trois fonctions pour l'AZP : `azp_greedy` (AZP), `azp_sa` (AZP-SA), `azp_tabu` (AZP-TABU). Pour l'exercice, nous fixons le nombre de régions à 5. Notez que par défaut, les variables seront centrées réduites (moyenne = 0 et écart-type = 1) avec le paramètre `scale_method=\"standardize\"`.\n\n```{r}\n#| echo: true \n#| message: false \n#| eval: true\nlibrary(rgeoda)\nlibrary(sf)\nlibrary(tmap)\n## Variables\nVarsEnv <- c(\"Lden\", \"NO2\", \"PM25\", \"VegHautPrt\")\n## Dataframe sans la géométrie et les quatre variables\nload(\"data/chap08/DonneesLyon.Rdata\")\nData <- st_drop_geometry(LyonIris[VarsEnv])\n## Création d'une matrice de contiguïté avec rgeoda\nqueen_w <- queen_weights(LyonIris)\n## Calcul des trois algorithmes\nazp <- rgeoda::azp_greedy(p=5,       # Nombre de régions\n                          w=queen_w, # Matrice contiguïté\n                          df=Data,   # Tableau de données\n                          scale_method = \"standardize\") # cote z\nazp.sa <- rgeoda::azp_sa(p=5, w=queen_w, df=Data, cooling_rate = 0.85)\nazp.tab <- rgeoda::azp_tabu(p=5, w=queen_w, df=Data, tabu_length = 10, conv_tabu = 10)\n## Création des trois champs dans la couche de Lyon\nLyonIris$Azp <- as.character(azp$Clusters)\nLyonIris$Azp_sa <- as.character(azp.sa$Clusters)\nLyonIris$Azp_tab <- as.character(azp.tab$Clusters)\n```\n\nCartographions les résultats des trois algorithmes AZP (@fig-CartoAZP).\n\n```{r}\n#| echo: true \n#| message: false \n#| warning: false\n#| label: fig-CartoAZP\n#| fig-align: center\n#| fig-cap: \"Regroupements des 505 IRIS en cinq régions selon les trois algorithmes AZP\"\n#| out-width: 100%\n\n## Cartographie des résultats\nCarte.AZP1 <- tm_shape(LyonIris)+tm_borders(col=\"gray\", lwd=.5)+\n              tm_fill(col=\"Azp\", palette = \"Set1\", title =\"\")+\n              tm_layout(frame=FALSE, \n                main.title = \"a. AZP\", \n                main.title.position = \"center\", \n                main.title.size = 1)\nCarte.AZP2 <- tm_shape(LyonIris)+tm_borders(col=\"gray\", lwd=.5)+\n              tm_fill(col=\"Azp_sa\", palette = \"Set1\", title =\"\")+\n              tm_layout(frame=FALSE, \n                main.title = \"b. AZP Simulated Annealing\", \n                main.title.position = \"center\", \n                main.title.size = 1)\nCarte.AZP3 <- tm_shape(LyonIris)+tm_borders(col=\"gray\", lwd=.5)+\n              tm_fill(col=\"Azp_tab\", palette = \"Set1\", title =\"\")+\n              tm_layout(frame=FALSE, \n                main.title = \"c. AZP Tabu Search\", \n                main.title.position = \"center\", \n                main.title.size = 1)\ntmap_arrange(Carte.AZP1, Carte.AZP2, Carte.AZP3, ncol = 2, nrow = 2)\n```\n\nPar la suite, nous comparons les résultats obtenus des trois algorithmes en reportant :\n\n1.  Les variances totale, intrarégionale et interrégionale, et surtout le ratio entre les variances intergroupe et totale. Ce ratio varie de 0 à 1 et exprime la proportion de la variance des variables qui est expliquée par les différentes régions obtenues; plus il est élevé, meilleur est le résultat. Par conséquent, il peut être utilisé pour identifier la solution optimale entre les trois algorithmes.\n\n2.  Le nombre d'observations par région.\n\n3.  Les valeurs moyennes des variables centrées réduites par région.\n\n```{r}\n#| echo: true \n#| message: false \n#| eval: true\n## Calcul du ratio entre les variances intergroupe et totale\ncat(\"Ratio des variances interrégionale et totale\",\n    \"\\nAZP : \", round(azp$`The ratio of between to total sum of squares`, 3),\n    \"\\nAZP-SA : \", round(azp.sa$`The ratio of between to total sum of squares`, 3),\n    \"\\nAZP-TABU : \", round(azp.tab$`The ratio of between to total sum of squares`, 3)\n)\n```\n\nÀ la lecture des valeurs du ratio entre la variance interrégionale et la variance totale ci-dessus, la plus élevée est obtenue pour l'AZP-SA (0,518), suivie de celles de l'AZP (0,436) et de l'AZP-TABU (0,428). Nous retenons alors l'AZP-SA.\n\n```{r}\n#| echo: true \n#| message: false \n#| eval: true\n## Nombre d'observations par région\ntable(LyonIris$Azp)\ntable(LyonIris$Azp_sa)\ntable(LyonIris$Azp_tab)\n## Valeurs moyennes des variables centrées réduites par région\nData$Azp <- azp$Clusters\nData$Azp_sa <- azp.sa$Clusters\nData$Azp_tab <- azp.tab$Clusters\naggregate(cbind(Lden,NO2,PM25,VegHautPrt) ~ Azp, data = Data, FUN = mean)\naggregate(cbind(Lden,NO2,PM25,VegHautPrt) ~ Azp_sa, data = Data, FUN = mean)\naggregate(cbind(Lden,NO2,PM25,VegHautPrt) ~ Azp_tab, data = Data, FUN = mean)\n```\n\nLes résultats finaux de l'AZP-SA sont présentés au @tbl-dataAZPsa et à la @fig-CartoAZPsa. L'analyse conjointe du tableau et de la carte permet ainsi d'interpréter chacune des classes. En guise d'exemple, nous pouvons conclure que :\n\n-   **La région 1** comprend 221 IRIS localisés au centre de la ville de Lyon et caractérisés par des niveaux moyens élevés de bruit (57,4), de dioxyde d'azote (35) et de particules fines (18,8) élevés et un faible pourcentage de canopée (14,4 %).\n\n-   Par contre, **la région 2** comprend 107 IRIS localisés à l'extrême ouest de la ville et caractérisés par les plus faibles niveaux de polluants (51,1, 20,5 et 14,2) et une forte moyenne pour la canopée (28,7 %).\n\n```{r}\n#| label: tbl-dataAZPsa\n#| tbl-cap: Valeurs moyennes des variables pour les cinq régions obtenues par l'AZP-SA\n#| echo: false\nTemp1 <- aggregate(cbind(Lden,NO2,PM25,VegHautPrt) ~ Azp_sa, data = st_drop_geometry(LyonIris), FUN = mean)\nTemp2 <- data.frame(table(LyonIris$Azp_sa))\nTemp1$Var1 <- Temp2$Freq\nknitr::kable(Temp1,\n           format.args = list(decimal.mark = ',', big.mark = \" \"),\n\t\t       digits = 1,\n           col.names=c(\"Région\",\"Lden\",\"NO2\", \"PM25\", \"Végétation\", \"Nombre d'IRIS\"),\n           align= c(\"c\",\"c\", \"c\", \"c\",\"c\", \"c\"),\n\t\t   format = \"markdown\"\n           )\n```\n\n```{r}\n#| echo: false \n#| message: false \n#| warning: false\n#| label: fig-CartoAZPsa\n#| fig-align: center\n#| fig-cap: \"Regroupement des IRIS en cinq régions selon l'AZP-TABU\"\n#| out-width: 100%\ntm_shape(LyonIris)+tm_borders(col=\"gray\", lwd=.5)+\n              tm_fill(col=\"Azp_sa\", palette = \"Set1\", title =\"Région\")+\n              tm_layout(frame=FALSE)+tm_scale_bar(breaks=c(0,5,10))\n```\n\nNous avons vu que pour les algorithmes AZP, il faut spécifier le nombre de régions. Nous l'avons fixé arbitrairement à 5. Comme pour n'importe quelle méthode de classification non supervisée, déterminer le nombre de classes optimal est une étape cruciale qui peut s'appuyer sur différentes techniques, dont la méthode du coude basée sur l'inertie expliquée (ici le ratio entre les variances interrégionale et totale), l'indicateur de silhouette et la méthode GAP. Pour une description détaillée de ces méthodes, consultez la [section suivante](https://serieboldr.github.io/MethodesQuantitatives/13-MethodeClassification.html#sec-1332) [@RBoldAir]. Le code ci-dessous permet de réaliser un graphique avec les valeurs du ratio (inertie expliquée) obtenues avec l'algorithme AZP-TABU calculé pour 2 à 10 régions. À la lecture de la @fig-AZPCoude, nous observons deux ruptures (coudes) très nettes à 5 et 8.\n\n```{r}\n#| echo: true \n#| eval : true\n#| message: false \n#| warning: false\n#| label: fig-AZPCoude\n#| fig-align: center\n#| fig-cap: \"Méthode du coude reposant sur l'inertie expliquée pour l'AZP-TABU\"\n#| out-width: 75%\nlibrary(ggplot2)\nnregions <- 2:10\nData <- data.frame(scale(st_drop_geometry(LyonIris)[VarsEnv]))\nqueen_w <- queen_weights(LyonIris)\ninertie <- sapply(nregions, function(k){\n  # calcul de l'AZP-TABU avec k\n  resultat <- azp_tabu(p=k, w=queen_w, df=Data, tabu_length = 10, conv_tabu = 10)\n  # récupération du ratio\n  ratios <- resultat$`The ratio of between to total sum of squares`\n  return(ratios)\n})\n\ndf <- data.frame(k = nregions, ratio = inertie)\nggplot(df) + \n  geom_line(aes(x = k, y = ratio)) + \n  geom_point(aes(x = k, y = ratio), color = \"red\") + \n  labs(x = \"Nombre de régions\", y = \"Inertie expliquée (%)\")\n```\n\n### Algorithme SKATER {#sec-0812}\n\nL'algorithme SKATER (*Spatial 'K'luster Analysis by Tree Edge Removal*) [@assunccao2006efficient] permet aussi de créer des régions sans discontinuité, en recourant à une technique de la théorie des graphes, soit celle de l'arbre couvrant de poids minimal (*minimum spanning tree*). Succinctement, la classification est obtenue avec les étapes suivantes :\n\n1.  Création d'un graphe de connectivité pour les polygones de la couche géographique. Dans ce graphe, les nœuds sont les centroïdes des polygones et les arêtes représentent les liaisons entre deux entités spatiales voisines.\n\n2.  Pour chaque arête, nous calculons la dissimilarité (appelée coût) des deux polygones voisins en fonction des *p* variables.\n\n3.  Pour chaque polygone, nous retenons l'arête avec le coût minimal. Autrement dit, pour chaque polygone, nous retenons son polygone voisin qui lui est le plus semblable selon les *p* variables. Nous obtenons ainsi l'arbre couvrant de poids minimal.\n\n4.  Cet arbre est ensuite élagué en supprimant les arêtes avec les plus forts coûts et en créant ainsi des sous-graphes en *m* régions sans discontinuité.\n\nPour une description plus détaillée de l'algorithme, consultez l'article d'Assunção *et al.* [-@assunccao2006efficient].\n\nLe code ci-dessous permet de centrer et de réduire les quatre variables (fonction `scale`) et de construire la matrice de voisinage entre les polygones de la couche `LyonIris` (fonction `poly2nb` de `spdep`).\n\n```{r}\n#| echo: true \n#| message: false \n#| warning: false \n#| eval: true\n\nlibrary(spdep)\nlibrary(tmap)\n## Variables\nVarsEnv <- c(\"Lden\", \"NO2\", \"PM25\", \"VegHautPrt\")\n## Dataframe sans la géométrie et les quatre variables\nload(\"data/chap08/DonneesLyon.Rdata\")\nData <- st_drop_geometry(LyonIris[VarsEnv])\n## Données centrées et réduites\nLyonIrisZscore <- data.frame(scale(Data))\n## Matrice voisinage\nLyon.nb <- poly2nb(LyonIris)\n```\n\nCalculons les coûts pour les arêtes reliant les nœuds avec la fonction `nbcosts`. Nous constatons que le polygone 1 est voisin des polygones 27, 26, 44 et 74 avec des coûts de 1,34, 1,74, 1,15 et 16,3. Par conséquent, parmi ses quatre voisins, le polygone 1 est le plus semblable au polygone 44 (coût minimal).\n\n```{r}\n#| echo: true \n#| message: false \n#| warning: false \n#| eval: true\n\n## Calcul des coûts pour les arêtes\nlcosts <- nbcosts(Lyon.nb, LyonIrisZscore)\nhead(Lyon.nb, n=1)\nhead(lcosts, n=1)\n```\n\nÀ partir de ces coûts, nous pouvons trouver l'arbre couvrant de poids minimal (*minimum spanning tree*), objet dénommé ici `Lyon.mst` qui comprend trois colonnes :\n\n-   La première pour l'identifiant du polygone.\n-   La seconde pour l'identifiant du polygone voisin.\n-   La troisième pour la valeur du coût minimal (similarité selon les variables retenues).\n\n```{r}\n#| echo: true \n#| message: false \n#| warning: false \n#| eval: true\n\n## Matrice de pondération spatiale avec les coûts\nLyon.w <- nb2listw(Lyon.nb, lcosts, style=\"B\")\n### Trouver l'arbre couvrant de poids minimal\nLyon.mst <- mstree(Lyon.w)\nhead(Lyon.mst, n=3)\n```\n\nLe code ci-dessous permet de visualiser le graphe de connectivité et l'arbre couvrant de poids minimal (@fig-ArbreMinimum).\n\n```{r}\n#| echo: true \n#| message: false \n#| warning: false \n#| eval: false\n## Visualisation du graphe de connectivité \ncoords <- st_coordinates(st_centroid(LyonIris))\nplot(st_geometry(LyonIris), border=\"gray\", lwd=.5, col=\"wheat\")\nplot(Lyon.nb, coords, add=TRUE, col=\"red\", lwd=1)\n## Visualisation de l'arbre couvrant de poids minimal\nplot(st_geometry(LyonIris), border=\"gray\", lwd=.5, col=\"wheat\")\nplot(Lyon.mst, coords, col=\"blue\", cex.lab=0.7, add=TRUE)\n```\n\n![Graphe de connectivité et arbre couvrant de poids minimal](images/Chap08/ArbreMinimum.png){#fig-ArbreMinimum width=\"100%\" fig-align=\"center\"}\n\nLe code ci-dessous permet de réaliser une classification SKATER avec cinq régions avec le *package* `spdep`.\n\n```{r}\n#| echo: true \n#| message: false \n#| warning: false \n#| eval: true\n\n## SKATER avec le package spdep\nset.seed(123456789)\nskater5.spdep <- spdep::skater(edges = Lyon.mst[,1:2], # premières colonnes de l'arbre \n                               data = data.frame(LyonIrisZscore),\n                               method = \"euclidean\",\n                               ncuts = 4)  # k-1 régions\ntable(skater5.spdep$groups)\n```\n\nToutefois, il est plus simple d'utiliser la fonction `skater` de `rgeoda` qui ne nécessite pas de créer au préalable l'arbre couvrant de poids minimal.\n\n```{r}\n#| echo: true \n#| message: false \n#| warning: false \n#| eval: true\n\n## SKATER avec le package rgeoda\nlibrary(rgeoda)\nData <- st_drop_geometry(LyonIris[VarsEnv])\nqueen_w <- queen_weights(LyonIris)\nskater5.rgeoda <- rgeoda::skater(k = 5,        # k-1 régions\n                                 w = queen_w,  # matrice de contiguïté\n                                 scale_method = \"standardize\",\n                                 df = Data)    # dataframe\ntable(skater5.rgeoda$Clusters)\n```\n\nLa @fig-SkaterAB démontre que les résultats obtenus sont légèrement différents avec les deux *packages*.\n\n```{r}\n#| echo: true \n#| eval: true \n#| message: false \n#| warning: false\n#| label: fig-SkaterAB\n#| fig-align: center\n#| fig-cap: \"Résultats de l'algorithme SKATER avec cinq classes obtenus avec les *packages* `spdep` et `rgeoda`\"\n#| out-width: 85%\n\nLyonIris$skater5spdep <- as.character(skater5.spdep$groups)\nLyonIris$skater5rgeoda <- as.character(skater5.rgeoda$Clusters)\n\nCarte.SkaterA <- tm_shape(LyonIris)+tm_borders(col=\"gray\", lwd=.5)+\n              tm_fill(col=\"skater5spdep\", palette = \"Set1\", title =\"\")+\n              tm_layout(frame=FALSE, \n                main.title = \"a. SKATER spdep\", \n                main.title.position = \"center\", \n                main.title.size = 1)\nCarte.SkaterB <- tm_shape(LyonIris)+tm_borders(col=\"gray\", lwd=.5)+\n              tm_fill(col=\"skater5rgeoda\", palette = \"Set1\", title =\"\")+\n              tm_layout(frame=FALSE, \n                main.title = \"b. SKATER rgeoda\", \n                main.title.position = \"center\", \n                main.title.size = 1)\ntmap_arrange(Carte.SkaterA, Carte.SkaterB)\n```\n\n::: bloc_aller_loin\n::: bloc_aller_loin-header\n::: bloc_aller_loin-icon\n:::\n\n**Algorithme SKATER avec un seuil minimal pour les classes**\n:::\n\n::: bloc_aller_loin-body\nDans une classification non supervisée avec une contrainte spatiale, il est possible de fixer un seuil minimal pour chaque région à partir d'une variable. L'exemple le plus classique est l'obtention de *p* régions qui doivent au moins avoir un nombre d'habitants fixé par la personne utilisatrice. Pour ce faire, nous utilisons deux paramètres de la fonction `spdep::skater`, soit `crit = 50000` pour fixer le seuil et `vec.crit = df$Population` pour indiquer le vecteur sur lequel est calculé le critère.\n\n```{r}\n#| echo: true \n#| message: false \n#| warning: false \n#| eval: false\nclus10_min <- spdep::skater(edges = ct_mst[,1:2], \n                     # dataframe avec les variables centrées réduites\n\t\t\t\t\t data = dfs,               \n                     # seuil fixé\n\t\t\t\t\t crit = 50000,             \n                     # variable population du dataframe\n\t\t\t\t\t vec.crit = df$Population, \n                     ncuts = 4)\n```\n\n**Fonction `skater` : différences entre les *packages*`rgeoda` et `spdep`**\n\nLa fonction `skater` de `rgeoda` a deux principaux avantages :\n\n1.  Comme décrit précédemment, l'avantage de la fonction `skater` de `rgeoda` est qu'elle ne nécessite pas de calculer au préalable l'arbre couvrant de poids minimal.\n\n2.  scale_method = c(\"raw\", \"standardize\", \"demean\", \"mad\", \"range_standardize\", \"range_adjust\") permet de transformer directement les variables. La méthode par défaut est la cote z (moyenne = 0 et écart-type = 1).\n\nAvec la fonction `skater` de `spdep`, vous devez préalablement transformer vos variables et construire l'arbre couvrant de poids minimal. Par contre, elle intègre de nombreux types de distance pour évaluer la dissimilarité entre les unités spatiales avec le paramètre `method = c(\"euclidean\",  \"maximum\", \"manhattan\", \"canberra\", \"binary\", \"minkowski\",  \"mahalanobis\")` tandis que le paramètre `distance_method = c(\"euclidean\", \"manhattan\")` de `rgeoda` ne comprend que deux types de distance.\n:::\n:::\n\n### Algorithmes REDCAP {#sec-0813}\n\nLes différentes versions de l'algorithme REDCAP (*Regionalization with dynamically constrained agglomerative clustering and partitioning*) proposé par Diansheng Guo [-@guo2008regionalization] sont aussi basées sur la construction d'un arbre (*spanning tree*) dont l'élagage est obtenu de cinq différentes façons :\n\n-   Premier ordre et saut minimal (*First-order and Single-linkage*) qui fournit un résultat identique à l'algorithme SKATER.\n\n-   Ordre complet et saut maximal (*Full-order and Complete-linkage*).\n\n-   Ordre complet et saut moyen (*Full-order and Average-linkage*).\n\n-   Ordre complet et saut minimal (*Full-order and Single-linkage*).\n\n-   Ordre complet et critère de Ward (*Full-order and Ward-linkage*).\n\nLe code ci-dessous permet de calculer les cinq versions de l'algorithmes REDCAP avec cinq régions et de comparer leurs résultats à partir du ratio (entre les variances interrégionale et totale) et du nombre d'observations par région. Ce ratio représente la part de la variance intra-groupe dans la variance totale des données. Plus ce ratio est grand, meilleure est la classification car elle résume une plus grande partie de la variance totale. \n\n```{r}\n#| echo: true \n#| message: false \n#| eval: true\nlibrary(rgeoda)\nlibrary(sf)\n## Préparation des données \nData <- st_drop_geometry(LyonIris[VarsEnv])\nqueen_w <- queen_weights(LyonIris)\n## Algorithmes REDCAP\nredcap5.A <- redcap(k = 5, w = queen_w, scale_method = \"standardize\", df = Data,\n                    method = \"firstorder-singlelinkage\")\nredcap5.B <- redcap(k = 5, w = queen_w, scale_method = \"standardize\", df = Data,\n                    method = \"fullorder-completelinkage\")\nredcap5.C <- redcap(k = 5, w = queen_w, scale_method = \"standardize\", df = Data,\n                    method = \"fullorder-averagelinkage\")\nredcap5.D <- redcap(k = 5, w = queen_w, scale_method = \"standardize\", df = Data,\n                    method = \"fullorder-singlelinkage\")\nredcap5.E <- redcap(k = 5, w = queen_w, scale_method = \"standardize\", df = Data,\n                    method = \"fullorder-wardlinkage\")\n## Comparaison des résultats\nRatios <- data.frame(Methode = c(\"firstorder-singlelinkage\", \n                                  \"fullorder-completelinkage\", \n                                  \"fullorder-averagelinkage\",\n                                  \"fullorder-singlelinkage\", \n                                  \"fullorder-wardlinkage\"),\n                      ratio = c(redcap5.A$`The ratio of between to total sum of squares`,\n                                redcap5.B$`The ratio of between to total sum of squares`,\n                                redcap5.C$`The ratio of between to total sum of squares`,\n                                redcap5.D$`The ratio of between to total sum of squares`,\n                                redcap5.E$`The ratio of between to total sum of squares`)\n                      )\nNobs <- data.frame(rbind(table(redcap5.A$Clusters), \n              table(redcap5.B$Clusters), \n              table(redcap5.C$Clusters), \n              table(redcap5.D$Clusters), \n              table(redcap5.E$Clusters))\n              )\nnames(Nobs) <- c(\"C1\", \"C2\", \"C3\", \"C4\", \"C5\")\nRatios <- cbind(Ratios, Nobs)\nRatios\n```\n\nÀ la lecture des valeurs du ratio ci-dessus, la meilleure classification serait celle obtenue avec un ordre complet et le critère de Ward. Cartographions les résultats des quatre versions de l'algorithme RECAP avec un ordre complet (@fig-CartoREDCAP).\n\n```{r}\n#| echo: true \n#| eval: true \n#| message: false \n#| warning: false\n#| label: fig-CartoREDCAP\n#| fig-align: center\n#| fig-cap: Regroupements des 505 IRIS en cinq régions selon les quatre versions de l'algorithme REDCAP avec un lien complet\n#| out-width: 100%\n\n## Ajout des champs dans la couche\nLyonIris$RC5.FOcompletelinkage  <- as.character(redcap5.B$Clusters)\nLyonIris$RC5.FOaveragelinkage   <- as.character(redcap5.C$Clusters)\nLyonIris$RC5.FOsinglelinkage    <- as.character(redcap5.D$Clusters)\nLyonIris$RC5.FOwardlinkage      <- as.character(redcap5.E$Clusters)\n## Cartographie des résultats\nCarte.RCb <- tm_shape(LyonIris)+tm_borders(col=\"gray\", lwd=.5)+\n              tm_fill(col=\"RC5.FOcompletelinkage\", palette = \"Set1\", title =\"\")+\n              tm_layout(frame=FALSE, \n                main.title = \"a. Saut maximal\", \n                main.title.position = \"center\", \n                main.title.size = 1)\nCarte.RCc <- tm_shape(LyonIris)+tm_borders(col=\"gray\", lwd=.5)+\n              tm_fill(col=\"RC5.FOaveragelinkage\", palette = \"Set1\", title =\"\")+\n              tm_layout(frame=FALSE, \n                main.title = \"b. Saut moyen\", \n                main.title.position = \"center\", \n                main.title.size = 1)\nCarte.RCd <- tm_shape(LyonIris)+tm_borders(col=\"gray\", lwd=.5)+\n              tm_fill(col=\"RC5.FOsinglelinkage\", palette = \"Set1\", title =\"\")+\n              tm_layout(frame=FALSE, \n                main.title = \"c. Saut minimal\", \n                main.title.position = \"center\", \n                main.title.size = 1)\nCarte.RCe <- tm_shape(LyonIris)+tm_borders(col=\"gray\", lwd=.5)+\n              tm_fill(col=\"RC5.FOwardlinkage\", palette = \"Set1\", title =\"\")+\n              tm_layout(frame=FALSE, \n                main.title = \"d. Critère de Ward\", \n                main.title.position = \"center\", \n                main.title.size = 1)\ntmap_arrange(Carte.RCb, Carte.RCc, Carte.RCd, Carte.RCe, ncol = 2, nrow = 2)\n```\n\n### Algorithme du *max-p-regions problem* {#sec-0814}\n\nCet algorithme, proposé par Duque *et al.* [-@duque2012max], n'est pas décrit ici. Notez qu'il peut être calculé avec trois fonctions du *package* `rgeoda`, soit `maxp_greedy`, `maxp_sa` et `maxp_tabu`.\n\n## Méthodes de classification non supervisée avec une dimension spatiale {#sec-082}\n\nNous avons vu que les méthodes de classification avec une contrainte spatiale visent à obtenir des régions non discontinues, c'est-à-dire sans mitage spatial. L'objectif des méthodes de classification non supervisée avec une dimension spatiale est quelque peu différent : classifier les observations en tenant compte de l'espace (proximité, voisinage entre les unités spatiales) afin de limiter les effets de mitage, sans toutefois l'interdire.\n\nDans le cadre de cette section, nous décrivons deux de ces méthodes qui intègrent la dimension spatiale de manière différente :\n\n1.  **La méthode *ClustGeo***, qui est une extension de la classification ascendante hiérarchique, est une méthode de classification non supervisée, spatiale et stricte. Cette méthode repose sur deux matrices de dissimilarité : une **matrice des distances sémantiques (attributaires)** calculée sur les valeurs de plusieurs variables caractérisant les observations et une **matrice de distances** (euclidienne le plus souvent) entre les entités géographiques. Nous cherchons ainsi à regrouper les observations qui se ressemblent à la fois selon leurs attributs et selon leur proximité spatiale.\n\n2.  **La méthode k-moyennes spatiale et floue (*Spatial fuzzy c-means*)**, qui est une extension de la méthode k-moyennes, est une méthode de classification non supervisée, spatiale et floue. Cette méthode repose sur deux matrices de dissimilarité : une **matrice sémantique** calculée sur les valeurs de plusieurs variables caractérisant les entités géographiques et une **matrice sémantique spatialement décalée**. Nous cherchons ainsi à regrouper les observations qui se ressemblent à la fois selon leurs caractéristiques et celles de leurs unités spatiales adjacentes ou proches.\n\nAutrement dit, dans la méthode *ClustGeo*, l'espace est introduit sous la forme d'une matrice de distances entre les entités spatiales (**agencement spatial**) tandis que dans la méthode du *Spatial fuzzy c-means*, il est introduit sous la forme d'une matrice de données sémantiques spatialement décalées (**information sémantique dans l'environnement immédiat**).\n\n### Classification ascendante hiérarchique spatiale (*ClustGeo*) {#sec-0821}\n\n#### Description de la méthode *ClustGeo* {#sec-08211}\n\nLa méthode *ClustGeo*, proposée par Marie Chavent et ses collègues [-@packageClustGeo], est une extension de la classification ascendante hiérarchique (CAH) qui intègre la dimension spatiale des entités géographiques. Cette méthode repose sur une idée brillante, soit de classer (regrouper) les observations (unités spatiales) en combinant deux matrices de dissimilarité :\n\n-   Une matrice sémantique calculée sur *p* variables caractérisant les unités spatiales ($D_0$).\n\n-   Une matrice spatiale calculée à partir des distances spatiales (habituellement euclidienne) entre les unités spatiales ($D_1$). Ces deux matrices sont ensuite fusionnées en une seule matrice finale représentant la combinaison de la distance spatiale et de la dissimilarité sémantique (attributaire) entre les observations. Notez qu'un paramètre $\\alpha$, variant de 0 à 1, permet de définir le poids de la matrice spatiale comparativement à celui de la sémantique :\n\n    -   Avec $\\alpha=0$, le poids accordé à la matrice spatiale est nul. Nous obtenons ainsi une CAH classique puisque seules les différences attributaires sont conservées.\n\n    -   Avec $\\alpha=1$, le poids accordé à la matrice spatiale est maximal; la classification est alors purement spatiale et ignore les différences attributaires.\n\nPar conséquent, « \\[...\\] l'enjeu principal est de fixer la valeur du paramètre $\\alpha$, considérant qu'une augmentation de $\\alpha$ revient à améliorer l'inertie expliquée de la matrice spatiale, au détriment d'une perte de l'inertie expliquée sur le plan sémantique » [@ClassificationFloue, p. 16].\n\n#### Calcul de la CAH classique {#sec-08212}\n\n::: bloc_attention\n::: bloc_attention-header\n::: bloc_attention-icon\n:::\n\n**Retour sur la classification ascendante hiérarchique (CAH)**\n:::\n\n::: bloc_attention-body\nPour une description détaillée de la CAH, consultez la [section suivante](https://serieboldr.github.io/MethodesQuantitatives/13-MethodeClassification.html#sec-133) [@RBoldAir].\n:::\n:::\n\nLe code ci-dessous permet de construire l'arbre de classification selon le critère de Ward à partir de la matrice sémantique (@fig-Dendrogramme).\n\n```{r}\n#| echo: true \n#| message: false \n#| warning: false \n#| eval: true\n#| label: fig-Dendrogramme\n#| fig-align: center\n#| fig-cap: Arbre de classification (dendrogramme)\n#| out-width: 100%\n\n## Variables pour la CAH\nVarsEnv <- c(\"Lden\", \"NO2\", \"PM25\", \"VegHautPrt\")\n## Dataframe sans la géométrie et les quatre variables\nload(\"data/chap08/DonneesLyon.Rdata\")\nData <- st_drop_geometry(LyonIris[VarsEnv])\n## Centrage (moyenne = 0) et réduction des données (variance = 1)\nDataZscore <- data.frame(scale(Data))\n## Matrice sémantique : dissimilarité des observations selon les variables\nMatrice.Semantique <- dist(DataZscore, method = \"euclidean\")\n# Calcul du dendrogramme avec le critère WARD\nArbre <- hclust(Matrice.Semantique, method = \"ward.D\")\nplot(Arbre, hang = -1, label = FALSE,\n     main = \"Dendrogramme \\n(arbre de classification selon le critère de Ward)\",\n     sub = \"\", ylab = \"Hauteur\", xlab = \"\"\n     )\n```\n\nÀ la lecture de la @fig-CAHCoude, nous ne détectons pas de seuils marqués dans l'inertie expliquée en fonction du nombre de groupes. Par conséquent, nous fixons arbitrairement le nombre de groupes à 5.\n\n```{r}\n#| echo: true \n#| eval: true \n#| message: false \n#| warning: false\n#| label: fig-CAHCoude\n#| fig-align: center\n#| fig-cap: Méthode du coude reposant sur l'inertie expliquée pour CAH\n#| out-width: 65%\n\nlibrary(ggplot2)\n# Fonction pour l'inertie expliquée par les classes\nprop_inert_cutree <- function(K,tree,n){\n  P <- cutree(tree,k=K)\n  W <- sum(tree$height[1:(n-K)])\n  Tot <- sum(tree$height)\n  return(1-W/Tot)\n}\n# Inertie expliquée par des CAH de 2 à 10 classes\ndf.inertie <- data.frame(NGroupes = 2:10,\n                         Inertie = sapply(2:10,\n                                          prop_inert_cutree,\n                                          tree=Arbre,\n                                          n=nrow(DataZscore)))\nggplot(df.inertie)+\n  geom_line(aes(x=NGroupes,y=Inertie))+\n  geom_point(aes(x=NGroupes,y=Inertie), color = \"red\") +\n  labs(y = \"Inertie expliquée\", x = \"Nombre de groupes\")\n```\n\nNous pouvons visualiser l'arbre avec une coupure à cinq classes.\n\n```{r}\n#| echo: true \n#| message: false \n#| warning: false \n#| eval: true\n\nplot(Arbre, labels = FALSE, \n     main = \"Partition en 2, 5 ou 9 classes\", \n     xlab = \"\", ylab = \"\", sub = \"\", axes = FALSE, hang = -1)\nrect.hclust(Arbre, 5, border = \"red\")\n## Coupure de l'arbre à cinq classes\nLyonIris$CAH5 <- as.character(cutree(Arbre, k=5))\n## Nombre d'observations par classe\ntable(LyonIris$CAH5)\n## Valeurs moyennes des classes\naggregate(cbind(Lden,NO2,PM25,VegHautPrt) ~ CAH5, data = st_drop_geometry(LyonIris), FUN = mean)\n```\n\nLes résultats de la CAH sont cartographiés à la @fig-CAHCarto tandis que le nombre d'observations et les valeurs moyennes des classes sont reportés au tableau @tbl-dataCAHtab.\n\n```{r}\n#| echo: true \n#| eval: true \n#| message: false \n#| warning: false\n#| label: fig-CAHCarto\n#| fig-align: center\n#| fig-cap: CAH avec le critère de Ward avec cinq classes\n#| out-width: 65%\n\nlibrary(tmap)\n## Cartographie des résultats\nCarte.CAH5 <- tm_shape(LyonIris)+tm_borders(col=\"gray\", lwd=.5)+\n              tm_fill(col=\"CAH5\", palette = \"Set1\", title =\"\")+\n              tm_layout(frame=FALSE, \n                main.title = \"CAH (critère de Ward)\", \n                main.title.position = \"center\", \n                main.title.size = 1)\nCarte.CAH5\n```\n\n```{r}\n#| label: tbl-dataCAHtab\n#| tbl-cap: Valeurs moyennes des variables pour les cinq classes obtenues avec la CAH\n#| echo: false\n\nTemp1 <- aggregate(cbind(Lden,NO2,PM25,VegHautPrt) ~ CAH5, data = st_drop_geometry(LyonIris), FUN = mean)\nTemp2 <- data.frame(table(LyonIris$CAH5))\nTemp1$Var1 <- Temp2$Freq\nknitr::kable(Temp1,\n           format.args = list(decimal.mark = ',', big.mark = \" \"),\n\t\t       digits = 1,\n           col.names=c(\"Classe\",\"Lden\",\"NO2\", \"PM25\", \"Végétation\", \"Nombre d'IRIS\"),\n           align= c(\"c\",\"c\", \"c\", \"c\",\"c\", \"c\"),\n           format = \"markdown\"\n           )\n```\n\n#### Calcul de la méthode *ClustGeo* {#sec-08213}\n\n**Calcul des deux matrices (sémantique et spatiale)**\n\nDans un premier temps, nous créons les matrices sémantique ($D_0$) et spatiale ($D_1$). Notez ici que les distances spatiales utilisées correspondent aux distances euclidiennes entre les centroïdes des IRIS.\n\n```{r}\n#| echo: true \n#| message: false \n#| warning: false \n#| eval: true\n\nlibrary(sf)\nlibrary(ClustGeo)\n## Variables\nVarsEnv <- c(\"Lden\", \"NO2\", \"PM25\", \"VegHautPrt\")\n## Dataframe sans la géométrie et les quatre variables\nload(\"data/chap08/DonneesLyon.Rdata\")\nData <- st_drop_geometry(LyonIris[VarsEnv])\n## Centrage (moyenne = 0) et réduction des données (variance = 1)\nDataZscore <- data.frame(scale(Data))\n## Matrice sémantique : dissimilarité des observations selon les variables\nMatrice.Semantique <- dist(DataZscore, method = \"euclidean\")\n## Matrice spatiale entre les unités spatiales\nxy <- st_coordinates(st_centroid(LyonIris))\nMatrice.Spatiale <- dist(xy, method = \"euclidean\")\n```\n\n**Optimisation de la valeur de** $\\alpha$\n\nPour la méthode *ClustGeo* (avec k = 5), nous évaluons l'impact du paramètre $\\alpha$ pour des valeurs de 0 à 1, avec un saut de 0,05. Pour ce faire, nous utilisons la fonction `choicealpha` du *package* `ClustGeo`. À la lecture de la @fig-GraphAlpha, nous constatons que :\n\n-   Plus la valeur de $\\alpha$ augmente, plus l'inertie expliquée par la matrice sémantique diminue (trait noir) et inversement, plus l'inertie expliquée par la matrice spatiale est forte.\n\n-   Avec $\\alpha = \\text{0,30}$, l'inertie expliquée par la matrice spatiale est de 50 % pour une perte d'inertie expliquée par la matrice sémantique de seulement 7 %. Avec $\\alpha = \\text{0,35}$, nous constatons une chute importante de l'inertie sémantique expliquée. Par conséquent, nous retenons la valeur de 0,30 pour la méthode *ClustGeo*. Ce choix donne un excellent compromis entre la préservation de l'inertie expliquée des données attributaires et la cohérence spatiale de la classification finale.\n\n```{r}\n#| echo: true \n#| eval: true \n#| message: false \n#| warning: false\n#| label: fig-GraphAlpha\n#| fig-align: center\n#| fig-cap: Impact des deux matrices dans la classification\n#| out-width: 75%\n\nalphas <- seq(0, 1, 0.05)\nresult <- choicealpha(D0 = Matrice.Semantique, # matrice sémantique\n                      D1 = Matrice.Spatiale,   # matrice spatiale \n                      range.alpha = alphas,    # valeurs de alpha\n                      K = 5,                   # nombre de classes\n                      wt = NULL, scale = TRUE, graph = FALSE)\n# Graphique avec Alpha\ndf.alpha <- data.frame(result$Q)\ndf.alpha$alpha <- alphas\nggplot(df.alpha)+\n  geom_line(aes(x=alphas,y= Q0), color = \"black\")+\n  geom_point(aes(x=alphas,y= Q0), color = \"black\", size=3) +\n  geom_line(aes(x=alphas,y= Q1), color = \"red\")+\n  geom_point(aes(x=alphas,y= Q1), color = \"red\", size=3) +\n  labs(y = \"Pseudo-inertie\", \n       x = \"Paramètre alpha\",\n       subtitle = \"Matrice sémantique (noir) et matrice spatiale (rouge)\")\n```\n\n**Réalisation de la méthode *ClustGeo***\n\n```{r}\n#| echo: true \n#| message: false \n#| warning: false \n#| eval: true\n\n## Dendrogramme avec ClustGeo\nArbre.ClustGeo <- hclustgeo(D0 = Matrice.Semantique, D1 = Matrice.Spatiale, alpha = 0.30)\n## Coupure de l'arbre à cinq classes\nLyonIris$ClustGeo5 <- as.character(cutree(Arbre.ClustGeo, k=5))\n## Nombre d'observations par classe\ntable(LyonIris$ClustGeo5)\n## Valeurs moyennes des classes\naggregate(cbind(Lden,NO2,PM25,VegHautPrt) ~ ClustGeo5, \n          data = st_drop_geometry(LyonIris), FUN = mean)\n\n```\n\n```{r}\n#| echo: true \n#| eval: true \n#| message: false \n#| warning: false\n#| label: fig-GraphAlpha2\n#| fig-align: center\n#| fig-cap: \"Classification ClustGeo avec alpha = 0,30\"\n#| out-width: 75%\n\n## Cartographie des résultats\nCarte.ClusteGeo <- tm_shape(LyonIris)+tm_borders(col=\"gray\", lwd=.5)+\n                    tm_fill(col=\"ClustGeo5\", palette = \"Set1\", title =\"\")+\n                    tm_layout(frame=FALSE, \n                      main.title = \"ClustGeo avec alpha = 0,30\", \n                      main.title.position = \"center\", \n                      main.title.size = 1)\nCarte.ClusteGeo\n```\n\n```{r}\n#| label: tbl-dataClusteGeotab\n#| tbl-cap: Valeurs moyennes des variables pour cinq classes obtenues par la méthode ClustGeo (alpha = 0,30)\n#| echo: false\n#| message: false\n#| warning: false\n\nTemp1 <- aggregate(cbind(Lden,NO2,PM25,VegHautPrt) ~ ClustGeo5, \n                   data = st_drop_geometry(LyonIris), FUN = mean)\nTemp2 <- data.frame(table(LyonIris$ClustGeo5))\nTemp1$Var1 <- Temp2$Freq\nknitr::kable(Temp1,\n           format.args = list(decimal.mark = ',', big.mark = \" \"),\n\t\t   digits = 1,\n           col.names=c(\"Classe\",\"Lden\",\"NO2\", \"PM25\", \"Végétation\", \"Nombre d'IRIS\"),\n           align= c(\"c\",\"c\", \"c\", \"c\",\"c\", \"c\"),\n\t\t   format = \"markdown\"\n           )\n```\n\nLa comparaison des typologies obtenues avec la CAH et la ClusteGeo démontre clairement que l'introduction d'une matrice spatiale dans la classification *ClustGeo* génère des classes qui sont moins discontinues spatialement (@fig-ComparaisonCAHClusteo).\n\n```{r}\n#| echo: true \n#| eval: true \n#| message: false \n#| warning: false\n#| label: fig-ComparaisonCAHClusteo\n#| fig-align: center\n#| fig-cap: Impact des deux matrices dans la classification\n#| out-width: 75%\n\ntmap_arrange(Carte.CAH5, Carte.ClusteGeo, nrow = 1, ncol = 2)\n```\n\n### *Spatial fuzzy c-means* {#sec-0822}\n\nLa méthode SFCM (*Spatial fuzzy c-means*), proposée par Weiling Cai et ses collègues [-@cai2007fast], est une extension de FCM, soit une version floue de l'algorithme des k-moyennes. Le principe de base est le suivant :\n\n« Comparativement au FCM classique, le SFCM introduit dans son calcul, en plus du jeu de données original ($D_0$), une version spatialement décalée ($D_s$) de ce dernier [@cai2007fast]. En analyse d'image, cela revient à calculer $D_s$ en appliquant un filtre moyen ou médian à $D_0$ (la médiane étant moins sensible aux valeurs extrêmes locales). Ce processus peut facilement s'appliquer à des entités géographiques vectorielles, en créant une matrice de pondération spatiale $W_{kl}$ (*l* étant les voisins de *k* et la diagonale de cette matrice valant 0) [@getis2009spatial] et en utilisant les poids de cette matrice dans le calcul d'une moyenne ou d'une médiane pondérée locale » [@ClassificationFloue, p. 8].\n\nComme pour la méthode *ClustGeo*, il est possible de fixer une pondération à la dimension spatiale ($D_s$) avec un paramètre $\\alpha$, qui varie de 0 à $\\infty$. Une valeur de 0 signale qu'aucun poids n'est accordé à la dimension spatiale, ce qui revient à calculer un FCM classique. Si $\\alpha = \\text{2}$, alors la version spatialement décalée aura deux fois plus de poids dans la classification que le jeu de données original.\n\n::: bloc_attention\n::: bloc_attention-header\n::: bloc_attention-icon\n:::\n\n**Retour sur une variable spatialement décalée et la classification k-moyennes**\n:::\n\n::: bloc_attention-body\nLa notion de variable spatialement décalée a été abordée au chapitre 2 (@fig-Chap02FigureVariableSpatialementDecalee). Pour une description détaillée de la classification k-moyennes, consultez la [section suivante](https://serieboldr.github.io/MethodesQuantitatives/13-MethodeClassification.html#sec-134) [@RBoldAir].\n:::\n:::\n\n#### Calcul de la classification c-moyennes floue classique (*fuzzy c-means*) {#sec-08221}\n\nÀ des fins de comparaison avec la CAH, nous proposons de calculer une classification c-moyennes floue classique (*fuzzy c-means*) avec cinq classes (*k* = 5). Puis, pour déterminer la valeur optimale de *m* (soit le degré de logique floue), nous calculons l'inertie expliquée et l'indice de silhouette pour des valeurs de *m* variant de 1,1 à 3 (avec un incrément de 0,1). Les résultats de ces deux indicateurs, présentés à la @fig-GraphCmeans, signalent que :\n\n-   Plus le paramètre *m* augmente, plus l'inertie expliquée diminue (@fig-GraphCmeans, a).\n-   La valeur de l'indice de silhouette est maximale avec *m* = 1,8 (@fig-GraphCmeans, b).\n\n```{r}\n#| echo: true \n#| eval: true \n#| message: false \n#| warning: false\n#| label: fig-GraphCmeans\n#| fig-align: center\n#| fig-cap: Évaluation de la qualité de la classification FCM avec cinq classes selon le degré de flou (m)\n#| out-width: 75%\n\nlibrary(geocmeans)\nlibrary(ggpubr)\n## Variables pour la CAH\nVarsEnv <- c(\"Lden\", \"NO2\", \"PM25\", \"VegHautPrt\")\n## Dataframe sans la géométrie et les quatre variables\nload(\"data/chap08/DonneesLyon.Rdata\")\nData <- st_drop_geometry(LyonIris[VarsEnv])\n## Centrage (moyenne = 0) et réduction des données (variance = 1)\nDataZscore <- data.frame(scale(Data))\n## Dataframe pour les différents paramètres avec k = 5 et degré de flou\nFCM_selection <- select_parameters(algo = \"FCM\",\n                  data = DataZscore,\n                  k = 5, # nous pourrions ici tester avec k=2:10\n                  m = seq(1.1,3,0.1),\n                  classidx = TRUE, spconsist = FALSE,\n                  tol = 0.001, seed = 456,\n                  verbose = FALSE)\n# Graphique avec l'inertie expliquée\nG1 <- ggplot(FCM_selection) +\n      geom_line(aes(x = m, y = Explained.inertia)) +\n      geom_point(aes(x = m,  y = Explained.inertia), color = \"red\")+\n      labs(title =\"a. Variation des données expliquées\",\n           y = \"Inertie expliquée\", x = \"Paramètre m\")\n# Graphique avec l'indice de silhouette\nG2 <- ggplot(FCM_selection) +\n      geom_line(aes(x = m, y = Silhouette.index)) +\n      geom_point(aes(x = m,  y = Silhouette.index), color = \"red\")+\n      labs(title =\"b. Consistance des groupes\",\n           y = \"Critère de silhouette floue\", x = \"Paramètre m\")\n# Combinaison des deux graphiques dans la figure\nggarrange(G1, G2)\n```\n\nRéalisons la classification c-moyennes floue et cartographions les probabilités d'appartenance à chacune des classes (@fig-FigureCmeansProb), puis l'appartenance à une classe (@fig-FigureCmeansCluster).\n\n```{r}\n#| echo: true \n#| eval: true \n#| message: false \n#| warning: false\n#| label: fig-FigureCmeansProb\n#| fig-align: center\n#| fig-cap: Cartographie des probabilités d'appartenance aux cinq classes avec la classification c-moyennes\n#| out-width: 100%\n\n## Classification du c-moyennes \nFCM <- CMeans(DataZscore, k = 5, m = 1.8, tol = 0.0001, verbose = FALSE, seed = 456)\n## Calcul des indicateurs de qualité\ncalcqualityIndexes(DataZscore, FCM$Belongings, 1.5)\n\n## Cartographie des probabilités d'appartenance à chaque classe\nCartes.FCM <- mapClusters(LyonIris,FCM$Belongings)\nnames(Cartes.FCM)\ntmap_arrange(Cartes.FCM$ProbaMaps, ncol = 2)\n```\n\n```{r}\n#| echo: true \n#| eval: true \n#| message: false \n#| warning: false\n#| label: fig-FigureCmeansCluster\n#| fig-align: center\n#| fig-cap: Cartographie des classes issues de la classification c-moyennes\n#| out-width: 75%\n\nCartes.FCM$ClusterPlot\n```\n\n#### Calcul de la classification c-moyennes floue et spatiale (*spatial fuzzy c-means*) {#sec-08222}\n\nDans l'exemple ci-dessous, nous calculons une classification SFCM (*spatial fuzzy c-means*). Nous avons déterminé avec l'analyse du simple FCM que la valeur de 1,8 pour *m* semblait satisfaisante avec cinq groupes (*k* = 5). Nous devons maintenant déterminer la valeur de *alpha*, soit le poids accordé aux variables spatialement décalées comparativement aux données originales.\n\nPour cela, nous calculons toutes les valeurs possibles d'*alpha* entre 0 et 2 avec un intervalle de 0,05. Nous comparons ensuite les valeurs des indices de silhouette (qualité sémantique de la classification) et d'incohérence spatiale des différentes solutions.\n\n```{r}\n#| echo: true \n#| eval: true \n#| message: false \n#| warning: false\n#| label: fig-SFCMChoiceAlpha\n#| fig-align: center\n#| fig-cap: Comparaison de différentes valeurs d'alpha pour le SFCM\n#| out-width: 75%\n\nlibrary(spdep)\nlibrary(ggplot2)\n# Création d'une matrice de contiguïté standardisée\nNeighbours <- poly2nb(LyonIris, queen = TRUE)\nWMat <- nb2listw(Neighbours, style=\"W\", zero.policy = TRUE)\nSFCM_selection <- select_parameters(algo = \"SFCM\",\n                  data = DataZscore,\n                  k = 5,\n                  m = 1.8,\n                  nblistw = WMat,\n                  alpha = seq(0,2,0.05),\n                  classidx = TRUE,\n                  tol = 0.001, seed = 456,\n                  spconsist  = TRUE,\n                  verbose = FALSE)\n\ngraph1 <- ggplot(SFCM_selection) + \n  geom_line(aes(x = alpha, y = Silhouette.index), color = 'black') + \n  geom_point(aes(x = alpha, y = Silhouette.index), color = 'red')+\n  labs(x = \"Alpha\", y = \"Indice de silhouette\", )\n\ngraph2 <- ggplot(SFCM_selection) + \n  geom_line(aes(x = alpha, y = spConsistency), color = 'black') + \n  geom_point(aes(x = alpha, y = spConsistency), color = 'red')+\n  labs(x = \"Alpha\", y = \"Indice d'incohérence spatiale\")\n\nggarrange(graph1, graph2, ncol = 2, nrow = 1)\n\n```\n\nLa @fig-SFCMChoiceAlpha démontre que l'augmentation d'*alpha* a pour effet de réduire la qualité sémantique de la classification (indice de silhouette), mais aussi de limiter l'inconsistance spatiale des résultats produits. Nous constatons aussi que l'augmentation d'*alpha* a un effet quasiment linéaire sur la dégradation de l'indice de silhouette et un effet curvilinéaire sur l'inconsistance spatiale. Cette dernière est donc plus impactée par les premières augmentations d'*alpha*. Nous proposons ici de retenir une solution avec $\\alpha$ = 0,55, car elle correspond à une baisse relativement faible de l'indice de silhouette (0,55 versus 0,50) pour une augmentation importante de la cohérence spatiale des résultats (0,39 versus 0,22).\n\n```{r}\n#| echo: true \n#| message: false \n#| warning: false \n#| eval: true\n\n# Calcul du SFCM\nSFCM <- SFCMeans(DataZscore, WMat, \n                 k = 5, \n                 m = 1.8, \n                 alpha = 0.55,\n                 tol = 0.0001, standardize = FALSE,\n                 verbose = FALSE, seed = 456)\n```\n\n**Résultats des indicateurs de qualité du SFCM**\n\n```{r}\n#| echo: true \n#| message: false \n#| warning: false \n#| eval: true\ncalcqualityIndexes(DataZscore, SFCM$Belongings, 1.5)\n```\n\n**Cartographie des probabilités d'appartenance à chaque classe**\n\nLa cartographie des probabilité d'appartenance pour chacune des cinq classes est présentée aux figures\n[-@fig-FigureSFCMProb1], [-@fig-FigureSFCMProb2], [-@fig-FigureSFCMProb3], [-@fig-FigureSFCMProb4] et [-@fig-FigureSFCMProb4].\n\n```{r}\n#| echo: true \n#| eval: true \n#| message: false \n#| warning: false\n#| label: fig-FigureSFCMProb1\n#| fig-align: center\n#| fig-cap: Cartographie des probabilités d'appartenance issues de la classification SFCM (classe 1)\n#| out-width: 100%\nCartes.SFCM <- mapClusters(LyonIris, SFCM$Belongings, undecided = 0.45)\nCartes.SFCM$ProbaMaps[[1]]\n```\n\n\n```{r}\n#| echo: true \n#| eval: true \n#| message: false \n#| warning: false\n#| label: fig-FigureSFCMProb2\n#| fig-align: center\n#| fig-cap: Cartographie des probabilités d'appartenance issues de la classification SFCM (classe 2)\n#| out-width: 100%\nCartes.SFCM$ProbaMaps[[2]]\n```\n\n```{r}\n#| echo: true \n#| eval: true \n#| message: false \n#| warning: false\n#| label: fig-FigureSFCMProb3\n#| fig-align: center\n#| fig-cap: Cartographie des probabilités d'appartenance issues de la classification SFCM (classe 3)\n#| out-width: 100%\nCartes.SFCM$ProbaMaps[[3]]\n```\n\n```{r}\n#| echo: true \n#| eval: true \n#| message: false \n#| warning: false\n#| label: fig-FigureSFCMProb4\n#| fig-align: center\n#| fig-cap: Cartographie des probabilités d'appartenance issues de la classification SFCM (classe 4)\n#| out-width: 100%\nCartes.SFCM$ProbaMaps[[4]]\n```\n\n```{r}\n#| echo: true \n#| eval: true \n#| message: false \n#| warning: false\n#| label: fig-FigureSFCMProb5\n#| fig-align: center\n#| fig-cap: Cartographie des probabilités d'appartenance issues de la classification SFCM (classe 5)\n#| out-width: 100%\nCartes.SFCM$ProbaMaps[[5]]\n```\n\n**Cartographie des probabilités d'appartenance à chaque classe du SFCM (@fig-FigureSFCMCluster)**\n\n```{r}\n#| echo: true \n#| eval: true \n#| message: false \n#| warning: false\n#| label: fig-FigureSFCMCluster\n#| fig-align: center\n#| fig-cap: Cartographie des classes issues de la classification SFCM\n#| out-width: 75%\nCartes.SFCM$ClusterPlot\n```\n\nIl est intéressant de noter que les groupes construits par les deux algorithmes (ClustGeo et SFCM) produisent des solutions assez différentes. Nous retrouvons dans les deux classifications un groupe caractérisant les quartiers centraux, puis une distinction assez nette entre les secteurs est et ouest de l'agglomération. Cependant, *ClustGeo* regroupe les Iris du sud dans un groupe spécifique alors que SFCM a identifié deux groupes plus atypiques spatialement. Le groupe 5 correspond aux Iris situés le long du boulevard périphérique encerclant Lyon.\n\nLe groupe 5 correspond donc à un ensemble d'Iris avec les plus hauts niveaux de concentration de pollutions atmosphérique et sonore (figure ci-dessous). Il est similaire en cela au groupe 1, qui est cependant marqué par des niveaux de bruit un peu moins élevés.\n\n```{r}\n#| echo: true \n#| eval: true \n#| message: false \n#| warning: false\nspiderPlots(Data,SFCM$Belongings,\n            chartcolors = c(\"darkorange3\",\n\t\t\t\t\t\t\t\"grey4\",\n\t\t\t\t\t\t\t\"darkgreen\",\n\t\t\t\t\t\t\t\"royalblue\", \n\t\t\t\t\t\t\t\"blueviolet\"))\n```\n\n::: bloc_aller_loin\n::: bloc_aller_loin-header\n::: bloc_aller_loin-icon\n:::\n\n**De multiples saveurs du SFCM**\n:::\n\n::: bloc_aller_loin-body\nPlusieurs variantes du SFCM sont proposées par le *package* `geocmeans` qui offrent une grande flexibilité :\n\n-   La version généralisée du SFCM (appelée SFGCM) avec l'ajout d'un paramètre supplémentaire (*beta*) qui accélère la convergence du SFCM en limitant la probabilité attribuée au groupe le moins probable de chaque observation.\n-   Les versions robustes du SFCM et SFGCM, qui normalisent les distances calculées entre les observations pour réaliser des classifications non sphériques.\n-   L'ajout d'un groupe de résidus, permettant d'attribuer les observations très incertaines à un groupe « poubelle », ce qui évite d'influencer la cohérence des « vrais groupes » avec des observations très atypiques.\n:::\n:::\n\n## Quiz de révision du chapitre {#sec-083}\n\n```{r}\n#| label: quizChapitre08\n#| echo: false \n#| eval: true \n#| message: false \n#| warning: false \n#| results: asis\n\nsource(\"code_complementaire/QuizzFunctions.R\")\nChap08Quiz <- quizz(\"quiz/Chap08.yml\", \"Chap08\")\nrender_quizz(Chap08Quiz)\n```\n\n## Exercices de révision {#sec-084}\n\n::: bloc_exercice\n::: bloc_exercice-header\n::: bloc_exercice-icon\n:::\n\n**Exercice 1.** Réalisation de classification avec contrainte spatiale\n:::\n\n::: bloc_exercice-body\n```{r}\n#| echo: true \n#| message: false \n#| warning: false \n#| eval: false\nlibrary(rgeoda)\nlibrary(sf)\nlibrary(tmap)\n## Préparation des données\nload(\"data/chap08/DonneesLyon.Rdata\")\nVarSocioEco <- c(\"Pct0_14\", \"Pct_65\", \"Pct_Img\", \"Pct_brevet\", \"NivVieMed\")\nData2 <- st_drop_geometry(LyonIris[VarSocioEco])\nqueen_w <- queen_weights(LyonIris)\n## Classification avec k = 4\nazp5_sa  <- à compléter\nazp5_tab <- à compléter\nskater5  <- rgeoda::skater(à compléter)\nredcap5  <- à compléter\n## Cartographie des résultats\nLyonIris$SE.azp4_sa  <- à compléter\nLyonIris$SE.azp4_tab <- à compléter\nLyonIris$SE.skater4 <- à compléter\nLyonIris$SE.recap4  <- à compléter\nCarte1 <- tm_shape(LyonIris)+tm_borders(col=\"gray\", lwd=.5)+\n  tm_fill(col=\"SE.azp4_sa\", palette = \"Set1\", title =\"\")+\n  tm_layout(frame=FALSE,  main.title = \"a. AZP-SA\",\n            main.title.position = \"center\", main.title.size = 1)\nCarte2 <- tm_shape(LyonIris)+tm_borders(col=\"gray\", lwd=.5)+\n  tm_fill(col=\"SE.azp4_tab\", palette = \"Set1\", title =\"\")+\n  tm_layout(frame=FALSE,  main.title = \"b. AZP-TABU\",\n            main.title.position = \"center\", main.title.size = 1)\nCarte3 <- tm_shape(LyonIris)+tm_borders(col=\"gray\", lwd=.5)+\n  tm_fill(col=\"SE.skater4\", palette = \"Set1\", title =\"\")+\n  tm_layout(frame=FALSE,  main.title = \"c. Skater\",\n            main.title.position = \"center\", main.title.size = 1)\nCarte4 <- tm_shape(LyonIris)+tm_borders(col=\"gray\", lwd=.5)+\n  tm_fill(col=\"SE.recap4\", palette = \"Set1\", title =\"\")+\n  tm_layout(frame=FALSE,  main.title = \"d. RECAP\",\n            main.title.position = \"center\", main.title.size = 1)\n\ntmap_arrange(à compléter)\n```\n\nCorrection à la [section @sec-12081].\n:::\n:::\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":true,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["css/quizlib.min.css"],"output-file":"08-ClassificationsSpatiales.html"},"language":{"toc-title-document":"Table des matières","toc-title-website":"Sur cette page","related-formats-title":"Autres formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"La source","other-links-title":"Autres liens","code-links-title":"Liens de code","launch-dev-container-title":"Lancer le Dev Container","launch-binder-title":"Lancer le Binder","article-notebook-label":"Cahier d'articles","notebook-preview-download":"Télécharger le cahier","notebook-preview-download-src":"Télécharger le code source","notebook-preview-back":"Retour à l'article","manuscript-meca-bundle":"Archive MECA","section-title-abstract":"Résumé","section-title-appendices":"Annexes","section-title-footnotes":"Notes de bas de page","section-title-references":"Les références","section-title-reuse":"Réutilisation","section-title-copyright":"Droits d'auteur","section-title-citation":"Citation","appendix-attribution-cite-as":"Veuillez citer ce travail comme suit :","appendix-attribution-bibtex":"BibTeX","appendix-view-license":"Voir la Licence","title-block-author-single":"Auteur·rice","title-block-author-plural":"Auteurs","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Date de publication","title-block-modified":"Modifié","title-block-keywords":"Mots clés","callout-tip-title":"Astuce","callout-note-title":"Note","callout-warning-title":"Avertissement","callout-important-title":"Important","callout-caution-title":"Mise en garde","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Montrer tout le code","code-tools-hide-all-code":"Cacher tout le code","code-tools-view-source":"Voir les sources","code-tools-source-code":"Code source","tools-share":"Share","tools-download":"Download","code-line":"Ligne","code-lines":"Lignes","copy-button-tooltip":"Copier vers le presse-papier","copy-button-tooltip-success":"Copié","repo-action-links-edit":"Modifier cette page","repo-action-links-source":"Voir la source","repo-action-links-issue":"Signaler un problème ou<br>formuler une suggestion","back-to-top":"Retour au sommet","search-no-results-text":"Pas de résultats","search-matching-documents-text":"documents trouvés","search-copy-link-title":"Copier le lien vers la recherche","search-hide-matches-text":"Cacher les correspondances additionnelles","search-more-match-text":"correspondance de plus dans ce document","search-more-matches-text":"correspondances de plus dans ce document","search-clear-button-title":"Effacer","search-text-placeholder":"","search-detached-cancel-button-title":"Annuler","search-submit-button-title":"Envoyer","search-label":"Recherche","toggle-section":"Basculer la section","toggle-sidebar":"Basculer la barre latérale","toggle-dark-mode":"Basculer le mode sombre","toggle-reader-mode":"Basculer en mode lecteur","toggle-navigation":"Basculer la navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Théorème","crossref-lem-title":"Lemme","crossref-cor-title":"Corollaire","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Définition","crossref-exm-title":"Exemple","crossref-exr-title":"Exercice","crossref-ch-prefix":"Chapitre","crossref-apx-prefix":"Annexe","crossref-sec-prefix":"Section","crossref-eq-prefix":"Équation","crossref-lof-title":"Liste des Figures","crossref-lot-title":"Liste des Tables","crossref-lol-title":"Liste des Listings","environment-proof-title":"Preuve","environment-remark-title":"Remarque","environment-solution-title":"Solution","listing-page-order-by":"Trier par","listing-page-order-by-default":"Ordre par défaut","listing-page-order-by-date-asc":"Le plus ancien","listing-page-order-by-date-desc":"Le plus récent","listing-page-order-by-number-desc":"Descendant","listing-page-order-by-number-asc":"Ascendant","listing-page-field-date":"Date","listing-page-field-title":"Titre","listing-page-field-description":"Description","listing-page-field-author":"Auteur·rice","listing-page-field-filename":"Nom de fichier","listing-page-field-filemodified":"Modifié","listing-page-field-subtitle":"Sous-titre","listing-page-field-readingtime":"Temps de lecture","listing-page-field-wordcount":"Compteur de Mots","listing-page-field-categories":"Catégories","listing-page-minutes-compact":"{0} min.","listing-page-category-all":"Tous","listing-page-no-matches":"Aucun article correspondant","listing-page-words":"{0} mots","listing-page-filter":"Filtre","draft":"Brouillon"},"metadata":{"lang":"fr","fig-responsive":true,"quarto-version":"1.6.42","license":"CC BY-SA","crossref":{"lof-title":"Liste des figures","lot-title":"Listes des tableaux","fig-prefix":"figure","tbl-prefix":"tableau","sec-prefix":"section","eq-prefix":"équation","fig-title":"Figure","tbl-title":"Tableau","eq-title":"Équation"},"bibliography":["references.bib"],"csl":"StyleRefs.csl","colorlinks":true,"theme":{"light":["cosmo","css/r4ds.scss"]},"fontsize":"11pt","mainfont":"Helvetica Neue,Helvetica,Arial,sans-serif","monofont":"SFMono-Regular,Menlo,Monaco,Consolas,\"Liberation Mono\",\"Courier New\",monospace"},"extensions":{"book":{"multiFile":true}}},"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":100,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"pdflatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","filters":["lua/callout_custom_pdf.lua"],"output-file":"Méthodes_analyses_spatiales.pdf","toc":true,"toc-depth":4,"include-in-header":["tex-hacks/color-tables.tex","tex-hacks/code-font.tex","tex-hacks/fix-unicode-chars.tex","tex-hacks/image-on-title-page.tex","tex-hacks/callout.tex"]},"language":{"toc-title-document":"Table des matières","toc-title-website":"Sur cette page","related-formats-title":"Autres formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"La source","other-links-title":"Autres liens","code-links-title":"Liens de code","launch-dev-container-title":"Lancer le Dev Container","launch-binder-title":"Lancer le Binder","article-notebook-label":"Cahier d'articles","notebook-preview-download":"Télécharger le cahier","notebook-preview-download-src":"Télécharger le code source","notebook-preview-back":"Retour à l'article","manuscript-meca-bundle":"Archive MECA","section-title-abstract":"Résumé","section-title-appendices":"Annexes","section-title-footnotes":"Notes de bas de page","section-title-references":"Les références","section-title-reuse":"Réutilisation","section-title-copyright":"Droits d'auteur","section-title-citation":"Citation","appendix-attribution-cite-as":"Veuillez citer ce travail comme suit :","appendix-attribution-bibtex":"BibTeX","appendix-view-license":"Voir la Licence","title-block-author-single":"Auteur·rice","title-block-author-plural":"Auteurs","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Date de publication","title-block-modified":"Modifié","title-block-keywords":"Mots clés","callout-tip-title":"Astuce","callout-note-title":"Note","callout-warning-title":"Avertissement","callout-important-title":"Important","callout-caution-title":"Mise en garde","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Montrer tout le code","code-tools-hide-all-code":"Cacher tout le code","code-tools-view-source":"Voir les sources","code-tools-source-code":"Code source","tools-share":"Share","tools-download":"Download","code-line":"Ligne","code-lines":"Lignes","copy-button-tooltip":"Copier vers le presse-papier","copy-button-tooltip-success":"Copié","repo-action-links-edit":"Modifier cette page","repo-action-links-source":"Voir la source","repo-action-links-issue":"Signaler un problème ou<br>formuler une suggestion","back-to-top":"Retour au sommet","search-no-results-text":"Pas de résultats","search-matching-documents-text":"documents trouvés","search-copy-link-title":"Copier le lien vers la recherche","search-hide-matches-text":"Cacher les correspondances additionnelles","search-more-match-text":"correspondance de plus dans ce document","search-more-matches-text":"correspondances de plus dans ce document","search-clear-button-title":"Effacer","search-text-placeholder":"","search-detached-cancel-button-title":"Annuler","search-submit-button-title":"Envoyer","search-label":"Recherche","toggle-section":"Basculer la section","toggle-sidebar":"Basculer la barre latérale","toggle-dark-mode":"Basculer le mode sombre","toggle-reader-mode":"Basculer en mode lecteur","toggle-navigation":"Basculer la navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Théorème","crossref-lem-title":"Lemme","crossref-cor-title":"Corollaire","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Définition","crossref-exm-title":"Exemple","crossref-exr-title":"Exercice","crossref-ch-prefix":"Chapitre","crossref-apx-prefix":"Annexe","crossref-sec-prefix":"Section","crossref-eq-prefix":"Équation","crossref-lof-title":"Liste des Figures","crossref-lot-title":"Liste des Tables","crossref-lol-title":"Liste des Listings","environment-proof-title":"Preuve","environment-remark-title":"Remarque","environment-solution-title":"Solution","listing-page-order-by":"Trier par","listing-page-order-by-default":"Ordre par défaut","listing-page-order-by-date-asc":"Le plus ancien","listing-page-order-by-date-desc":"Le plus récent","listing-page-order-by-number-desc":"Descendant","listing-page-order-by-number-asc":"Ascendant","listing-page-field-date":"Date","listing-page-field-title":"Titre","listing-page-field-description":"Description","listing-page-field-author":"Auteur·rice","listing-page-field-filename":"Nom de fichier","listing-page-field-filemodified":"Modifié","listing-page-field-subtitle":"Sous-titre","listing-page-field-readingtime":"Temps de lecture","listing-page-field-wordcount":"Compteur de Mots","listing-page-field-categories":"Catégories","listing-page-minutes-compact":"{0} min.","listing-page-category-all":"Tous","listing-page-no-matches":"Aucun article correspondant","listing-page-words":"{0} mots","listing-page-filter":"Filtre","draft":"Brouillon"},"metadata":{"block-headings":true,"license":"CC BY-SA","lang":"fr","crossref":{"lof-title":"Liste des figures","lot-title":"Listes des tableaux","fig-prefix":"figure","tbl-prefix":"tableau","sec-prefix":"section","eq-prefix":"équation","fig-title":"Figure","tbl-title":"Tableau","eq-title":"Équation"},"bibliography":["references.bib"],"csl":"StyleRefs.csl","documentclass":"scrbook","papersize":"letter","classoption":["open=any","twoside=false","french"],"hyperrefoptions":["pdfpagemode=UseOutlines","pdfdisplaydoctitle=true","pdfpagelayout=SinglePage","pdfstartpage=1"],"geometry":["top=20mm","left=15mm","right=15mm","heightrounded"],"fontfamily":"libertinus","fontfamilyoptions":["p"],"lof":true,"lot":true,"code-block-border-left":false,"fontsize":"11pt","urlcolor":"Green4","citecolor":"violet","linkcolor":"violet","colorlinks":true,"header-includes":["\\usepackage{xparse}","\\renewcommand{\\thepart}{} % Enlever numérotation des parties","\\setcounter{secnumdepth}{3} % Activer la numérotation des sections jusqu'au niveau des sous-sections"]},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["html","pdf"]}